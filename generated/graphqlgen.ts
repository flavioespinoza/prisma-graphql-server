// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Post, User } from "../_ado/_models";
type Context = any;

export type PostOrderByInput =
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "id_ASC"
  | "id_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface PostWhereUniqueInput {
    id?: string | null;
  }

  export interface ArgsPost {
    where: PostWhereUniqueInput;
  }

  export interface ArgsPostsByUser {
    email?: string | null;
  }

  export type FeedResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>;
      };

  export type PostResolver =
    | ((
        parent: undefined,
        args: ArgsPost,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post | null | Promise<Post | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPost,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | null | Promise<Post | null>;
      };

  export type PostsByUserResolver =
    | ((
        parent: undefined,
        args: ArgsPostsByUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post[] | Promise<Post[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPostsByUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>;
      };

  export interface Type {
    feed:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post[] | Promise<Post[]>;
        };

    post:
      | ((
          parent: undefined,
          args: ArgsPost,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | null | Promise<Post | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPost,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post | null | Promise<Post | null>;
        };

    postsByUser:
      | ((
          parent: undefined,
          args: ArgsPostsByUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | Promise<Post[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPostsByUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post[] | Promise<Post[]>;
        };
  }
}

export namespace PostResolvers {
  export const defaultResolvers = {
    id: (parent: Post) => parent.id,
    published: (parent: Post) => parent.published,
    title: (parent: Post) => parent.title
  };

  export type AuthorResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type IdResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type PublishedResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type TitleResolver =
    | ((
        parent: Post,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    author:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    id:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    published:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    title:
      | ((
          parent: Post,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Post,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    email: (parent: User) => (parent.email === undefined ? null : parent.email),
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name
  };

  export interface PostWhereInput {
    AND?: PostWhereInput[] | null;
    author?: UserWhereInput | null;
    id?: string | null;
    id_contains?: string | null;
    id_ends_with?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_not?: string | null;
    id_not_contains?: string | null;
    id_not_ends_with?: string | null;
    id_not_in?: string[] | null;
    id_not_starts_with?: string | null;
    id_starts_with?: string | null;
    NOT?: PostWhereInput[] | null;
    OR?: PostWhereInput[] | null;
    published?: boolean | null;
    published_not?: boolean | null;
    title?: string | null;
    title_contains?: string | null;
    title_ends_with?: string | null;
    title_gt?: string | null;
    title_gte?: string | null;
    title_in?: string[] | null;
    title_lt?: string | null;
    title_lte?: string | null;
    title_not?: string | null;
    title_not_contains?: string | null;
    title_not_ends_with?: string | null;
    title_not_in?: string[] | null;
    title_not_starts_with?: string | null;
    title_starts_with?: string | null;
  }
  export interface UserWhereInput {
    AND?: UserWhereInput[] | null;
    email?: string | null;
    email_contains?: string | null;
    email_ends_with?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_not?: string | null;
    email_not_contains?: string | null;
    email_not_ends_with?: string | null;
    email_not_in?: string[] | null;
    email_not_starts_with?: string | null;
    email_starts_with?: string | null;
    id?: string | null;
    id_contains?: string | null;
    id_ends_with?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_not?: string | null;
    id_not_contains?: string | null;
    id_not_ends_with?: string | null;
    id_not_in?: string[] | null;
    id_not_starts_with?: string | null;
    id_starts_with?: string | null;
    name?: string | null;
    name_contains?: string | null;
    name_ends_with?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_not?: string | null;
    name_not_contains?: string | null;
    name_not_ends_with?: string | null;
    name_not_in?: string[] | null;
    name_not_starts_with?: string | null;
    name_starts_with?: string | null;
    NOT?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    posts_every?: PostWhereInput | null;
    posts_none?: PostWhereInput | null;
    posts_some?: PostWhereInput | null;
  }

  export interface ArgsPosts {
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
    orderBy?: PostOrderByInput | null;
    skip?: number | null;
    where?: PostWhereInput | null;
  }

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type PostsResolver =
    | ((
        parent: User,
        args: ArgsPosts,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post[] | null | Promise<Post[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: ArgsPosts,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | null | Promise<Post[] | null>;
      };

  export interface Type {
    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    posts:
      | ((
          parent: User,
          args: ArgsPosts,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post[] | null | Promise<Post[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: ArgsPosts,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post[] | null | Promise<Post[] | null>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface UserCreateInput {
    email?: string | null;
    id?: string | null;
    name: string;
    posts?: PostCreateManyWithoutAuthorInput | null;
  }
  export interface PostWhereUniqueInput {
    id?: string | null;
  }
  export interface PostCreateManyWithoutAuthorInput {
    connect?: PostWhereUniqueInput[] | null;
    create?: PostCreateWithoutAuthorInput[] | null;
  }
  export interface PostCreateWithoutAuthorInput {
    id?: string | null;
    published?: boolean | null;
    title: string;
  }

  export interface ArgsCreateDraft {
    authorId?: string | null;
    title?: string | null;
  }

  export interface ArgsCreateUser {
    data: UserCreateInput;
  }

  export interface ArgsDeletePost {
    where: PostWhereUniqueInput;
  }

  export interface ArgsPublish {
    id?: string | null;
  }

  export type CreateDraftResolver =
    | ((
        parent: undefined,
        args: ArgsCreateDraft,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post | Promise<Post>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateDraft,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | Promise<Post>;
      };

  export type CreateUserResolver =
    | ((
        parent: undefined,
        args: ArgsCreateUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type DeletePostResolver =
    | ((
        parent: undefined,
        args: ArgsDeletePost,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post | null | Promise<Post | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeletePost,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | null | Promise<Post | null>;
      };

  export type PublishResolver =
    | ((
        parent: undefined,
        args: ArgsPublish,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Post | null | Promise<Post | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPublish,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | null | Promise<Post | null>;
      };

  export interface Type {
    createDraft:
      | ((
          parent: undefined,
          args: ArgsCreateDraft,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | Promise<Post>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateDraft,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post | Promise<Post>;
        };

    createUser:
      | ((
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    deletePost:
      | ((
          parent: undefined,
          args: ArgsDeletePost,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | null | Promise<Post | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeletePost,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post | null | Promise<Post | null>;
        };

    publish:
      | ((
          parent: undefined,
          args: ArgsPublish,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Post | null | Promise<Post | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPublish,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Post | null | Promise<Post | null>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Post: PostResolvers.Type;
  User: UserResolvers.Type;
  Mutation: MutationResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
