/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Email: EmailObject
      PhoneNumber: PhoneNumberObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      EmailConnection: EmailConnectionObject
      EmailEdge: EmailEdgeObject
      AggregateEmail: AggregateEmailObject
      PhoneNumberConnection: PhoneNumberConnectionObject
      PhoneNumberEdge: PhoneNumberEdgeObject
      AggregatePhoneNumber: AggregatePhoneNumberObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      EmailSubscriptionPayload: EmailSubscriptionPayloadObject
      EmailPreviousValues: EmailPreviousValuesObject
      PhoneNumberSubscriptionPayload: PhoneNumberSubscriptionPayloadObject
      PhoneNumberPreviousValues: PhoneNumberPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Email: EmailFieldDetails
      PhoneNumber: PhoneNumberFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      EmailConnection: EmailConnectionFieldDetails
      EmailEdge: EmailEdgeFieldDetails
      AggregateEmail: AggregateEmailFieldDetails
      PhoneNumberConnection: PhoneNumberConnectionFieldDetails
      PhoneNumberEdge: PhoneNumberEdgeFieldDetails
      AggregatePhoneNumber: AggregatePhoneNumberFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      EmailSubscriptionPayload: EmailSubscriptionPayloadFieldDetails
      EmailPreviousValues: EmailPreviousValuesFieldDetails
      PhoneNumberSubscriptionPayload: PhoneNumberSubscriptionPayloadFieldDetails
      PhoneNumberPreviousValues: PhoneNumberPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      EmailWhereInput: EmailWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      PhoneNumberWhereInput: PhoneNumberWhereInputInputObject
      EmailWhereUniqueInput: EmailWhereUniqueInputInputObject
      PhoneNumberWhereUniqueInput: PhoneNumberWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      EmailCreateManyWithoutOwnerInput: EmailCreateManyWithoutOwnerInputInputObject
      EmailCreateWithoutOwnerInput: EmailCreateWithoutOwnerInputInputObject
      PhoneNumberCreateManyWithoutOwnerInput: PhoneNumberCreateManyWithoutOwnerInputInputObject
      PhoneNumberCreateWithoutOwnerInput: PhoneNumberCreateWithoutOwnerInputInputObject
      PhoneNumberCreateuseInput: PhoneNumberCreateuseInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      EmailUpdateManyWithoutOwnerInput: EmailUpdateManyWithoutOwnerInputInputObject
      EmailUpdateWithWhereUniqueWithoutOwnerInput: EmailUpdateWithWhereUniqueWithoutOwnerInputInputObject
      EmailUpdateWithoutOwnerDataInput: EmailUpdateWithoutOwnerDataInputInputObject
      EmailUpsertWithWhereUniqueWithoutOwnerInput: EmailUpsertWithWhereUniqueWithoutOwnerInputInputObject
      EmailScalarWhereInput: EmailScalarWhereInputInputObject
      EmailUpdateManyWithWhereNestedInput: EmailUpdateManyWithWhereNestedInputInputObject
      EmailUpdateManyDataInput: EmailUpdateManyDataInputInputObject
      PhoneNumberUpdateManyWithoutOwnerInput: PhoneNumberUpdateManyWithoutOwnerInputInputObject
      PhoneNumberUpdateWithWhereUniqueWithoutOwnerInput: PhoneNumberUpdateWithWhereUniqueWithoutOwnerInputInputObject
      PhoneNumberUpdateWithoutOwnerDataInput: PhoneNumberUpdateWithoutOwnerDataInputInputObject
      PhoneNumberUpdateuseInput: PhoneNumberUpdateuseInputInputObject
      PhoneNumberUpsertWithWhereUniqueWithoutOwnerInput: PhoneNumberUpsertWithWhereUniqueWithoutOwnerInputInputObject
      PhoneNumberScalarWhereInput: PhoneNumberScalarWhereInputInputObject
      PhoneNumberUpdateManyWithWhereNestedInput: PhoneNumberUpdateManyWithWhereNestedInputInputObject
      PhoneNumberUpdateManyDataInput: PhoneNumberUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      EmailCreateInput: EmailCreateInputInputObject
      UserCreateOneWithoutEmailsInput: UserCreateOneWithoutEmailsInputInputObject
      UserCreateWithoutEmailsInput: UserCreateWithoutEmailsInputInputObject
      EmailUpdateInput: EmailUpdateInputInputObject
      UserUpdateOneWithoutEmailsInput: UserUpdateOneWithoutEmailsInputInputObject
      UserUpdateWithoutEmailsDataInput: UserUpdateWithoutEmailsDataInputInputObject
      UserUpsertWithoutEmailsInput: UserUpsertWithoutEmailsInputInputObject
      EmailUpdateManyMutationInput: EmailUpdateManyMutationInputInputObject
      PhoneNumberCreateInput: PhoneNumberCreateInputInputObject
      UserCreateOneWithoutPhoneNumbersInput: UserCreateOneWithoutPhoneNumbersInputInputObject
      UserCreateWithoutPhoneNumbersInput: UserCreateWithoutPhoneNumbersInputInputObject
      PhoneNumberUpdateInput: PhoneNumberUpdateInputInputObject
      UserUpdateOneWithoutPhoneNumbersInput: UserUpdateOneWithoutPhoneNumbersInputInputObject
      UserUpdateWithoutPhoneNumbersDataInput: UserUpdateWithoutPhoneNumbersDataInputInputObject
      UserUpsertWithoutPhoneNumbersInput: UserUpsertWithoutPhoneNumbersInputInputObject
      PhoneNumberUpdateManyMutationInput: PhoneNumberUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      EmailSubscriptionWhereInput: EmailSubscriptionWhereInputInputObject
      PhoneNumberSubscriptionWhereInput: PhoneNumberSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    EmailOrderByInput: EmailOrderByInputValues,
    PhoneNumberOrderByInput: PhoneNumberOrderByInputValues,
    PhoneNumberUse: PhoneNumberUseValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'email', args?: QueryEmailArgs[] | false, alias?: string  } 
  | { name: 'emails', args?: QueryEmailsArgs[] | false, alias?: string  } 
  | { name: 'emailsConnection', args?: QueryEmailsConnectionArgs[] | false, alias?: string  } 
  | { name: 'phoneNumber', args?: QueryPhoneNumberArgs[] | false, alias?: string  } 
  | { name: 'phoneNumbers', args?: QueryPhoneNumbersArgs[] | false, alias?: string  } 
  | { name: 'phoneNumbersConnection', args?: QueryPhoneNumbersConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'email'
  | 'emails'
  | 'emailsConnection'
  | 'phoneNumber'
  | 'phoneNumbers'
  | 'phoneNumbersConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmailArgs =
  | 'where'
type QueryEmailsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmailsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPhoneNumberArgs =
  | 'where'
type QueryPhoneNumbersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPhoneNumbersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  email: {
    type: 'Email'
    args: Record<QueryEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EmailWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Email | null> | prisma.Email | null
  }
  emails: {
    type: 'Email'
    args: Record<QueryEmailsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmailWhereInput | null, orderBy?: prisma.EmailOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Email[]> | prisma.Email[]
  }
  emailsConnection: {
    type: 'EmailConnection'
    args: Record<QueryEmailsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmailWhereInput | null, orderBy?: prisma.EmailOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailConnection> | prisma.EmailConnection
  }
  phoneNumber: {
    type: 'PhoneNumber'
    args: Record<QueryPhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PhoneNumberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber | null> | prisma.PhoneNumber | null
  }
  phoneNumbers: {
    type: 'PhoneNumber'
    args: Record<QueryPhoneNumbersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PhoneNumberWhereInput | null, orderBy?: prisma.PhoneNumberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber[]> | prisma.PhoneNumber[]
  }
  phoneNumbersConnection: {
    type: 'PhoneNumberConnection'
    args: Record<QueryPhoneNumbersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PhoneNumberWhereInput | null, orderBy?: prisma.PhoneNumberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumberConnection> | prisma.PhoneNumberConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'middleName', args?: [] | false, alias?: string  } 
  | { name: 'emails', args?: UserEmailsArgs[] | false, alias?: string  } 
  | { name: 'phoneNumbers', args?: UserPhoneNumbersArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'
  | 'firstName'
  | 'lastName'
  | 'middleName'
  | 'emails'
  | 'phoneNumbers'


type UserEmailsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserPhoneNumbersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  middleName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  emails: {
    type: 'Email'
    args: Record<UserEmailsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: EmailWhereInput | null, orderBy?: prisma.EmailOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Email[]> | prisma.Email[]
  }
  phoneNumbers: {
    type: 'PhoneNumber'
    args: Record<UserPhoneNumbersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: PhoneNumberWhereInput | null, orderBy?: prisma.PhoneNumberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber[]> | prisma.PhoneNumber[]
  }
}
  

// Types for Email

type EmailObject =
  | EmailFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 

type EmailFields =
  | 'id'
  | 'value'
  | 'owner'



  

export interface EmailFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  value: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Email">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for PhoneNumber

type PhoneNumberObject =
  | PhoneNumberFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'use', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 

type PhoneNumberFields =
  | 'id'
  | 'type'
  | 'use'
  | 'value'
  | 'owner'



  

export interface PhoneNumberFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  use: {
    type: 'PhoneNumberUse'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumber">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumberUse[]> | prisma.PhoneNumberUse[]
  }
  value: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PhoneNumber">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EmailConnection

type EmailConnectionObject =
  | EmailConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EmailConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EmailConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmailConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EmailEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EmailConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailEdge[]> | prisma.EmailEdge[]
  }
  aggregate: {
    type: 'AggregateEmail'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmailConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEmail> | prisma.AggregateEmail
  }
}
  

// Types for EmailEdge

type EmailEdgeObject =
  | EmailEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EmailEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EmailEdgeFieldDetails {
  node: {
    type: 'Email'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmailEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Email> | prisma.Email
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEmail

type AggregateEmailObject =
  | AggregateEmailFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEmailFields =
  | 'count'



  

export interface AggregateEmailFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PhoneNumberConnection

type PhoneNumberConnectionObject =
  | PhoneNumberConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PhoneNumberConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PhoneNumberConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PhoneNumberEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumberEdge[]> | prisma.PhoneNumberEdge[]
  }
  aggregate: {
    type: 'AggregatePhoneNumber'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePhoneNumber> | prisma.AggregatePhoneNumber
  }
}
  

// Types for PhoneNumberEdge

type PhoneNumberEdgeObject =
  | PhoneNumberEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PhoneNumberEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PhoneNumberEdgeFieldDetails {
  node: {
    type: 'PhoneNumber'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumberEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber> | prisma.PhoneNumber
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePhoneNumber

type AggregatePhoneNumberObject =
  | AggregatePhoneNumberFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePhoneNumberFields =
  | 'count'



  

export interface AggregatePhoneNumberFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createEmail', args?: MutationCreateEmailArgs[] | false, alias?: string  } 
  | { name: 'updateEmail', args?: MutationUpdateEmailArgs[] | false, alias?: string  } 
  | { name: 'updateManyEmails', args?: MutationUpdateManyEmailsArgs[] | false, alias?: string  } 
  | { name: 'upsertEmail', args?: MutationUpsertEmailArgs[] | false, alias?: string  } 
  | { name: 'deleteEmail', args?: MutationDeleteEmailArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEmails', args?: MutationDeleteManyEmailsArgs[] | false, alias?: string  } 
  | { name: 'createPhoneNumber', args?: MutationCreatePhoneNumberArgs[] | false, alias?: string  } 
  | { name: 'updatePhoneNumber', args?: MutationUpdatePhoneNumberArgs[] | false, alias?: string  } 
  | { name: 'updateManyPhoneNumbers', args?: MutationUpdateManyPhoneNumbersArgs[] | false, alias?: string  } 
  | { name: 'upsertPhoneNumber', args?: MutationUpsertPhoneNumberArgs[] | false, alias?: string  } 
  | { name: 'deletePhoneNumber', args?: MutationDeletePhoneNumberArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPhoneNumbers', args?: MutationDeleteManyPhoneNumbersArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createEmail'
  | 'updateEmail'
  | 'updateManyEmails'
  | 'upsertEmail'
  | 'deleteEmail'
  | 'deleteManyEmails'
  | 'createPhoneNumber'
  | 'updatePhoneNumber'
  | 'updateManyPhoneNumbers'
  | 'upsertPhoneNumber'
  | 'deletePhoneNumber'
  | 'deleteManyPhoneNumbers'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateEmailArgs =
  | 'data'
type MutationUpdateEmailArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEmailsArgs =
  | 'data'
  | 'where'
type MutationUpsertEmailArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEmailArgs =
  | 'where'
type MutationDeleteManyEmailsArgs =
  | 'where'
type MutationCreatePhoneNumberArgs =
  | 'data'
type MutationUpdatePhoneNumberArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPhoneNumbersArgs =
  | 'data'
  | 'where'
type MutationUpsertPhoneNumberArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePhoneNumberArgs =
  | 'where'
type MutationDeleteManyPhoneNumbersArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEmail: {
    type: 'Email'
    args: Record<MutationCreateEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmailCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Email> | prisma.Email
  }
  updateEmail: {
    type: 'Email'
    args: Record<MutationUpdateEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmailUpdateInput, where: EmailWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Email | null> | prisma.Email | null
  }
  updateManyEmails: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEmailsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmailUpdateManyMutationInput, where?: EmailWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEmail: {
    type: 'Email'
    args: Record<MutationUpsertEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmailWhereUniqueInput, create: EmailCreateInput, update: EmailUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Email> | prisma.Email
  }
  deleteEmail: {
    type: 'Email'
    args: Record<MutationDeleteEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmailWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Email | null> | prisma.Email | null
  }
  deleteManyEmails: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEmailsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EmailWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPhoneNumber: {
    type: 'PhoneNumber'
    args: Record<MutationCreatePhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PhoneNumberCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber> | prisma.PhoneNumber
  }
  updatePhoneNumber: {
    type: 'PhoneNumber'
    args: Record<MutationUpdatePhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PhoneNumberUpdateInput, where: PhoneNumberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber | null> | prisma.PhoneNumber | null
  }
  updateManyPhoneNumbers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPhoneNumbersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PhoneNumberUpdateManyMutationInput, where?: PhoneNumberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPhoneNumber: {
    type: 'PhoneNumber'
    args: Record<MutationUpsertPhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PhoneNumberWhereUniqueInput, create: PhoneNumberCreateInput, update: PhoneNumberUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber> | prisma.PhoneNumber
  }
  deletePhoneNumber: {
    type: 'PhoneNumber'
    args: Record<MutationDeletePhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PhoneNumberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber | null> | prisma.PhoneNumber | null
  }
  deleteManyPhoneNumbers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPhoneNumbersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PhoneNumberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'email', args?: SubscriptionEmailArgs[] | false, alias?: string  } 
  | { name: 'phoneNumber', args?: SubscriptionPhoneNumberArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'email'
  | 'phoneNumber'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionEmailArgs =
  | 'where'
type SubscriptionPhoneNumberArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  email: {
    type: 'EmailSubscriptionPayload'
    args: Record<SubscriptionEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EmailSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailSubscriptionPayload | null> | prisma.EmailSubscriptionPayload | null
  }
  phoneNumber: {
    type: 'PhoneNumberSubscriptionPayload'
    args: Record<SubscriptionPhoneNumberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PhoneNumberSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumberSubscriptionPayload | null> | prisma.PhoneNumberSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'middleName', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'
  | 'firstName'
  | 'lastName'
  | 'middleName'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  middleName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EmailSubscriptionPayload

type EmailSubscriptionPayloadObject =
  | EmailSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EmailSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EmailSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmailSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Email'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmailSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Email | null> | prisma.Email | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EmailPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmailSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmailPreviousValues | null> | prisma.EmailPreviousValues | null
  }
}
  

// Types for EmailPreviousValues

type EmailPreviousValuesObject =
  | EmailPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 

type EmailPreviousValuesFields =
  | 'id'
  | 'value'



  

export interface EmailPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  value: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PhoneNumberSubscriptionPayload

type PhoneNumberSubscriptionPayloadObject =
  | PhoneNumberSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PhoneNumberSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PhoneNumberSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'PhoneNumber'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PhoneNumberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumber | null> | prisma.PhoneNumber | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PhoneNumberPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PhoneNumberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumberPreviousValues | null> | prisma.PhoneNumberPreviousValues | null
  }
}
  

// Types for PhoneNumberPreviousValues

type PhoneNumberPreviousValuesObject =
  | PhoneNumberPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'use', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 

type PhoneNumberPreviousValuesFields =
  | 'id'
  | 'type'
  | 'use'
  | 'value'



  

export interface PhoneNumberPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  use: {
    type: 'PhoneNumberUse'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PhoneNumberPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PhoneNumberUse[]> | prisma.PhoneNumberUse[]
  }
  value: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EmailWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  value?: string | null
  value_not?: string | null
  value_in?: string[]
  value_not_in?: string[]
  value_lt?: string | null
  value_lte?: string | null
  value_gt?: string | null
  value_gte?: string | null
  value_contains?: string | null
  value_not_contains?: string | null
  value_starts_with?: string | null
  value_not_starts_with?: string | null
  value_ends_with?: string | null
  value_not_ends_with?: string | null
  owner?: UserWhereInput | null
  AND?: EmailWhereInput[]
  OR?: EmailWhereInput[]
  NOT?: EmailWhereInput[]
}
export type EmailWhereInputInputObject =
  | Extract<keyof EmailWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'value_not', alias?: string  } 
  | { name: 'value_in', alias?: string  } 
  | { name: 'value_not_in', alias?: string  } 
  | { name: 'value_lt', alias?: string  } 
  | { name: 'value_lte', alias?: string  } 
  | { name: 'value_gt', alias?: string  } 
  | { name: 'value_gte', alias?: string  } 
  | { name: 'value_contains', alias?: string  } 
  | { name: 'value_not_contains', alias?: string  } 
  | { name: 'value_starts_with', alias?: string  } 
  | { name: 'value_not_starts_with', alias?: string  } 
  | { name: 'value_ends_with', alias?: string  } 
  | { name: 'value_not_ends_with', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  middleName?: string | null
  middleName_not?: string | null
  middleName_in?: string[]
  middleName_not_in?: string[]
  middleName_lt?: string | null
  middleName_lte?: string | null
  middleName_gt?: string | null
  middleName_gte?: string | null
  middleName_contains?: string | null
  middleName_not_contains?: string | null
  middleName_starts_with?: string | null
  middleName_not_starts_with?: string | null
  middleName_ends_with?: string | null
  middleName_not_ends_with?: string | null
  emails_every?: EmailWhereInput | null
  emails_some?: EmailWhereInput | null
  emails_none?: EmailWhereInput | null
  phoneNumbers_every?: PhoneNumberWhereInput | null
  phoneNumbers_some?: PhoneNumberWhereInput | null
  phoneNumbers_none?: PhoneNumberWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'middleName_not', alias?: string  } 
  | { name: 'middleName_in', alias?: string  } 
  | { name: 'middleName_not_in', alias?: string  } 
  | { name: 'middleName_lt', alias?: string  } 
  | { name: 'middleName_lte', alias?: string  } 
  | { name: 'middleName_gt', alias?: string  } 
  | { name: 'middleName_gte', alias?: string  } 
  | { name: 'middleName_contains', alias?: string  } 
  | { name: 'middleName_not_contains', alias?: string  } 
  | { name: 'middleName_starts_with', alias?: string  } 
  | { name: 'middleName_not_starts_with', alias?: string  } 
  | { name: 'middleName_ends_with', alias?: string  } 
  | { name: 'middleName_not_ends_with', alias?: string  } 
  | { name: 'emails_every', alias?: string  } 
  | { name: 'emails_some', alias?: string  } 
  | { name: 'emails_none', alias?: string  } 
  | { name: 'phoneNumbers_every', alias?: string  } 
  | { name: 'phoneNumbers_some', alias?: string  } 
  | { name: 'phoneNumbers_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PhoneNumberWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: string | null
  type_not?: string | null
  type_in?: string[]
  type_not_in?: string[]
  type_lt?: string | null
  type_lte?: string | null
  type_gt?: string | null
  type_gte?: string | null
  type_contains?: string | null
  type_not_contains?: string | null
  type_starts_with?: string | null
  type_not_starts_with?: string | null
  type_ends_with?: string | null
  type_not_ends_with?: string | null
  value?: string | null
  value_not?: string | null
  value_in?: string[]
  value_not_in?: string[]
  value_lt?: string | null
  value_lte?: string | null
  value_gt?: string | null
  value_gte?: string | null
  value_contains?: string | null
  value_not_contains?: string | null
  value_starts_with?: string | null
  value_not_starts_with?: string | null
  value_ends_with?: string | null
  value_not_ends_with?: string | null
  owner?: UserWhereInput | null
  AND?: PhoneNumberWhereInput[]
  OR?: PhoneNumberWhereInput[]
  NOT?: PhoneNumberWhereInput[]
}
export type PhoneNumberWhereInputInputObject =
  | Extract<keyof PhoneNumberWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'type_contains', alias?: string  } 
  | { name: 'type_not_contains', alias?: string  } 
  | { name: 'type_starts_with', alias?: string  } 
  | { name: 'type_not_starts_with', alias?: string  } 
  | { name: 'type_ends_with', alias?: string  } 
  | { name: 'type_not_ends_with', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'value_not', alias?: string  } 
  | { name: 'value_in', alias?: string  } 
  | { name: 'value_not_in', alias?: string  } 
  | { name: 'value_lt', alias?: string  } 
  | { name: 'value_lte', alias?: string  } 
  | { name: 'value_gt', alias?: string  } 
  | { name: 'value_gte', alias?: string  } 
  | { name: 'value_contains', alias?: string  } 
  | { name: 'value_not_contains', alias?: string  } 
  | { name: 'value_starts_with', alias?: string  } 
  | { name: 'value_not_starts_with', alias?: string  } 
  | { name: 'value_ends_with', alias?: string  } 
  | { name: 'value_not_ends_with', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmailWhereUniqueInput {
  id?: string | null
}
export type EmailWhereUniqueInputInputObject =
  | Extract<keyof EmailWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PhoneNumberWhereUniqueInput {
  id?: string | null
}
export type PhoneNumberWhereUniqueInputInputObject =
  | Extract<keyof PhoneNumberWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string | null
  firstName?: string
  lastName?: string
  middleName?: string | null
  emails?: EmailCreateManyWithoutOwnerInput | null
  phoneNumbers?: PhoneNumberCreateManyWithoutOwnerInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'emails', alias?: string  } 
  | { name: 'phoneNumbers', alias?: string  } 
  
export interface EmailCreateManyWithoutOwnerInput {
  create?: EmailCreateWithoutOwnerInput[]
  connect?: EmailWhereUniqueInput[]
}
export type EmailCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof EmailCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EmailCreateWithoutOwnerInput {
  id?: string | null
  value?: string
}
export type EmailCreateWithoutOwnerInputInputObject =
  | Extract<keyof EmailCreateWithoutOwnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface PhoneNumberCreateManyWithoutOwnerInput {
  create?: PhoneNumberCreateWithoutOwnerInput[]
  connect?: PhoneNumberWhereUniqueInput[]
}
export type PhoneNumberCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof PhoneNumberCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PhoneNumberCreateWithoutOwnerInput {
  id?: string | null
  type?: string
  use?: PhoneNumberCreateuseInput | null
  value?: string
}
export type PhoneNumberCreateWithoutOwnerInputInputObject =
  | Extract<keyof PhoneNumberCreateWithoutOwnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'use', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface PhoneNumberCreateuseInput {
  set?: prisma.PhoneNumberUse[]
}
export type PhoneNumberCreateuseInputInputObject =
  | Extract<keyof PhoneNumberCreateuseInput, string>
  | { name: 'set', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  firstName?: string | null
  lastName?: string | null
  middleName?: string | null
  emails?: EmailUpdateManyWithoutOwnerInput | null
  phoneNumbers?: PhoneNumberUpdateManyWithoutOwnerInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'emails', alias?: string  } 
  | { name: 'phoneNumbers', alias?: string  } 
  
export interface EmailUpdateManyWithoutOwnerInput {
  create?: EmailCreateWithoutOwnerInput[]
  delete?: EmailWhereUniqueInput[]
  connect?: EmailWhereUniqueInput[]
  set?: EmailWhereUniqueInput[]
  disconnect?: EmailWhereUniqueInput[]
  update?: EmailUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: EmailUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: EmailScalarWhereInput[]
  updateMany?: EmailUpdateManyWithWhereNestedInput[]
}
export type EmailUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof EmailUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EmailUpdateWithWhereUniqueWithoutOwnerInput {
  where?: EmailWhereUniqueInput
  data?: EmailUpdateWithoutOwnerDataInput
}
export type EmailUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof EmailUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EmailUpdateWithoutOwnerDataInput {
  value?: string | null
}
export type EmailUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof EmailUpdateWithoutOwnerDataInput, string>
  | { name: 'value', alias?: string  } 
  
export interface EmailUpsertWithWhereUniqueWithoutOwnerInput {
  where?: EmailWhereUniqueInput
  update?: EmailUpdateWithoutOwnerDataInput
  create?: EmailCreateWithoutOwnerInput
}
export type EmailUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof EmailUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EmailScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  value?: string | null
  value_not?: string | null
  value_in?: string[]
  value_not_in?: string[]
  value_lt?: string | null
  value_lte?: string | null
  value_gt?: string | null
  value_gte?: string | null
  value_contains?: string | null
  value_not_contains?: string | null
  value_starts_with?: string | null
  value_not_starts_with?: string | null
  value_ends_with?: string | null
  value_not_ends_with?: string | null
  AND?: EmailScalarWhereInput[]
  OR?: EmailScalarWhereInput[]
  NOT?: EmailScalarWhereInput[]
}
export type EmailScalarWhereInputInputObject =
  | Extract<keyof EmailScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'value_not', alias?: string  } 
  | { name: 'value_in', alias?: string  } 
  | { name: 'value_not_in', alias?: string  } 
  | { name: 'value_lt', alias?: string  } 
  | { name: 'value_lte', alias?: string  } 
  | { name: 'value_gt', alias?: string  } 
  | { name: 'value_gte', alias?: string  } 
  | { name: 'value_contains', alias?: string  } 
  | { name: 'value_not_contains', alias?: string  } 
  | { name: 'value_starts_with', alias?: string  } 
  | { name: 'value_not_starts_with', alias?: string  } 
  | { name: 'value_ends_with', alias?: string  } 
  | { name: 'value_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmailUpdateManyWithWhereNestedInput {
  where?: EmailScalarWhereInput
  data?: EmailUpdateManyDataInput
}
export type EmailUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EmailUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EmailUpdateManyDataInput {
  value?: string | null
}
export type EmailUpdateManyDataInputInputObject =
  | Extract<keyof EmailUpdateManyDataInput, string>
  | { name: 'value', alias?: string  } 
  
export interface PhoneNumberUpdateManyWithoutOwnerInput {
  create?: PhoneNumberCreateWithoutOwnerInput[]
  delete?: PhoneNumberWhereUniqueInput[]
  connect?: PhoneNumberWhereUniqueInput[]
  set?: PhoneNumberWhereUniqueInput[]
  disconnect?: PhoneNumberWhereUniqueInput[]
  update?: PhoneNumberUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: PhoneNumberUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: PhoneNumberScalarWhereInput[]
  updateMany?: PhoneNumberUpdateManyWithWhereNestedInput[]
}
export type PhoneNumberUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof PhoneNumberUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PhoneNumberUpdateWithWhereUniqueWithoutOwnerInput {
  where?: PhoneNumberWhereUniqueInput
  data?: PhoneNumberUpdateWithoutOwnerDataInput
}
export type PhoneNumberUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof PhoneNumberUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PhoneNumberUpdateWithoutOwnerDataInput {
  type?: string | null
  use?: PhoneNumberUpdateuseInput | null
  value?: string | null
}
export type PhoneNumberUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof PhoneNumberUpdateWithoutOwnerDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'use', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface PhoneNumberUpdateuseInput {
  set?: prisma.PhoneNumberUse[]
}
export type PhoneNumberUpdateuseInputInputObject =
  | Extract<keyof PhoneNumberUpdateuseInput, string>
  | { name: 'set', alias?: string  } 
  
export interface PhoneNumberUpsertWithWhereUniqueWithoutOwnerInput {
  where?: PhoneNumberWhereUniqueInput
  update?: PhoneNumberUpdateWithoutOwnerDataInput
  create?: PhoneNumberCreateWithoutOwnerInput
}
export type PhoneNumberUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof PhoneNumberUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PhoneNumberScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  type?: string | null
  type_not?: string | null
  type_in?: string[]
  type_not_in?: string[]
  type_lt?: string | null
  type_lte?: string | null
  type_gt?: string | null
  type_gte?: string | null
  type_contains?: string | null
  type_not_contains?: string | null
  type_starts_with?: string | null
  type_not_starts_with?: string | null
  type_ends_with?: string | null
  type_not_ends_with?: string | null
  value?: string | null
  value_not?: string | null
  value_in?: string[]
  value_not_in?: string[]
  value_lt?: string | null
  value_lte?: string | null
  value_gt?: string | null
  value_gte?: string | null
  value_contains?: string | null
  value_not_contains?: string | null
  value_starts_with?: string | null
  value_not_starts_with?: string | null
  value_ends_with?: string | null
  value_not_ends_with?: string | null
  AND?: PhoneNumberScalarWhereInput[]
  OR?: PhoneNumberScalarWhereInput[]
  NOT?: PhoneNumberScalarWhereInput[]
}
export type PhoneNumberScalarWhereInputInputObject =
  | Extract<keyof PhoneNumberScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'type_contains', alias?: string  } 
  | { name: 'type_not_contains', alias?: string  } 
  | { name: 'type_starts_with', alias?: string  } 
  | { name: 'type_not_starts_with', alias?: string  } 
  | { name: 'type_ends_with', alias?: string  } 
  | { name: 'type_not_ends_with', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'value_not', alias?: string  } 
  | { name: 'value_in', alias?: string  } 
  | { name: 'value_not_in', alias?: string  } 
  | { name: 'value_lt', alias?: string  } 
  | { name: 'value_lte', alias?: string  } 
  | { name: 'value_gt', alias?: string  } 
  | { name: 'value_gte', alias?: string  } 
  | { name: 'value_contains', alias?: string  } 
  | { name: 'value_not_contains', alias?: string  } 
  | { name: 'value_starts_with', alias?: string  } 
  | { name: 'value_not_starts_with', alias?: string  } 
  | { name: 'value_ends_with', alias?: string  } 
  | { name: 'value_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PhoneNumberUpdateManyWithWhereNestedInput {
  where?: PhoneNumberScalarWhereInput
  data?: PhoneNumberUpdateManyDataInput
}
export type PhoneNumberUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PhoneNumberUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PhoneNumberUpdateManyDataInput {
  type?: string | null
  use?: PhoneNumberUpdateuseInput | null
  value?: string | null
}
export type PhoneNumberUpdateManyDataInputInputObject =
  | Extract<keyof PhoneNumberUpdateManyDataInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'use', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  firstName?: string | null
  lastName?: string | null
  middleName?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  
export interface EmailCreateInput {
  id?: string | null
  value?: string
  owner?: UserCreateOneWithoutEmailsInput | null
}
export type EmailCreateInputInputObject =
  | Extract<keyof EmailCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserCreateOneWithoutEmailsInput {
  create?: UserCreateWithoutEmailsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutEmailsInputInputObject =
  | Extract<keyof UserCreateOneWithoutEmailsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutEmailsInput {
  id?: string | null
  name?: string | null
  firstName?: string
  lastName?: string
  middleName?: string | null
  phoneNumbers?: PhoneNumberCreateManyWithoutOwnerInput | null
}
export type UserCreateWithoutEmailsInputInputObject =
  | Extract<keyof UserCreateWithoutEmailsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'phoneNumbers', alias?: string  } 
  
export interface EmailUpdateInput {
  value?: string | null
  owner?: UserUpdateOneWithoutEmailsInput | null
}
export type EmailUpdateInputInputObject =
  | Extract<keyof EmailUpdateInput, string>
  | { name: 'value', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserUpdateOneWithoutEmailsInput {
  create?: UserCreateWithoutEmailsInput | null
  update?: UserUpdateWithoutEmailsDataInput | null
  upsert?: UserUpsertWithoutEmailsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutEmailsInputInputObject =
  | Extract<keyof UserUpdateOneWithoutEmailsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutEmailsDataInput {
  name?: string | null
  firstName?: string | null
  lastName?: string | null
  middleName?: string | null
  phoneNumbers?: PhoneNumberUpdateManyWithoutOwnerInput | null
}
export type UserUpdateWithoutEmailsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutEmailsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'phoneNumbers', alias?: string  } 
  
export interface UserUpsertWithoutEmailsInput {
  update?: UserUpdateWithoutEmailsDataInput
  create?: UserCreateWithoutEmailsInput
}
export type UserUpsertWithoutEmailsInputInputObject =
  | Extract<keyof UserUpsertWithoutEmailsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EmailUpdateManyMutationInput {
  value?: string | null
}
export type EmailUpdateManyMutationInputInputObject =
  | Extract<keyof EmailUpdateManyMutationInput, string>
  | { name: 'value', alias?: string  } 
  
export interface PhoneNumberCreateInput {
  id?: string | null
  type?: string
  use?: PhoneNumberCreateuseInput | null
  value?: string
  owner?: UserCreateOneWithoutPhoneNumbersInput | null
}
export type PhoneNumberCreateInputInputObject =
  | Extract<keyof PhoneNumberCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'use', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserCreateOneWithoutPhoneNumbersInput {
  create?: UserCreateWithoutPhoneNumbersInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutPhoneNumbersInputInputObject =
  | Extract<keyof UserCreateOneWithoutPhoneNumbersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutPhoneNumbersInput {
  id?: string | null
  name?: string | null
  firstName?: string
  lastName?: string
  middleName?: string | null
  emails?: EmailCreateManyWithoutOwnerInput | null
}
export type UserCreateWithoutPhoneNumbersInputInputObject =
  | Extract<keyof UserCreateWithoutPhoneNumbersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'emails', alias?: string  } 
  
export interface PhoneNumberUpdateInput {
  type?: string | null
  use?: PhoneNumberUpdateuseInput | null
  value?: string | null
  owner?: UserUpdateOneWithoutPhoneNumbersInput | null
}
export type PhoneNumberUpdateInputInputObject =
  | Extract<keyof PhoneNumberUpdateInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'use', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserUpdateOneWithoutPhoneNumbersInput {
  create?: UserCreateWithoutPhoneNumbersInput | null
  update?: UserUpdateWithoutPhoneNumbersDataInput | null
  upsert?: UserUpsertWithoutPhoneNumbersInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutPhoneNumbersInputInputObject =
  | Extract<keyof UserUpdateOneWithoutPhoneNumbersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutPhoneNumbersDataInput {
  name?: string | null
  firstName?: string | null
  lastName?: string | null
  middleName?: string | null
  emails?: EmailUpdateManyWithoutOwnerInput | null
}
export type UserUpdateWithoutPhoneNumbersDataInputInputObject =
  | Extract<keyof UserUpdateWithoutPhoneNumbersDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'emails', alias?: string  } 
  
export interface UserUpsertWithoutPhoneNumbersInput {
  update?: UserUpdateWithoutPhoneNumbersDataInput
  create?: UserCreateWithoutPhoneNumbersInput
}
export type UserUpsertWithoutPhoneNumbersInputInputObject =
  | Extract<keyof UserUpsertWithoutPhoneNumbersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PhoneNumberUpdateManyMutationInput {
  type?: string | null
  use?: PhoneNumberUpdateuseInput | null
  value?: string | null
}
export type PhoneNumberUpdateManyMutationInputInputObject =
  | Extract<keyof PhoneNumberUpdateManyMutationInput, string>
  | { name: 'type', alias?: string  } 
  | { name: 'use', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmailSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EmailWhereInput | null
  AND?: EmailSubscriptionWhereInput[]
  OR?: EmailSubscriptionWhereInput[]
  NOT?: EmailSubscriptionWhereInput[]
}
export type EmailSubscriptionWhereInputInputObject =
  | Extract<keyof EmailSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PhoneNumberSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PhoneNumberWhereInput | null
  AND?: PhoneNumberSubscriptionWhereInput[]
  OR?: PhoneNumberSubscriptionWhereInput[]
  NOT?: PhoneNumberSubscriptionWhereInput[]
}
export type PhoneNumberSubscriptionWhereInputInputObject =
  | Extract<keyof PhoneNumberSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type EmailOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'value_ASC'
  | 'value_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PhoneNumberOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'value_ASC'
  | 'value_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PhoneNumberUseValues =
  | 'PERSONAL'
  | 'WORK'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'middleName_ASC'
  | 'middleName_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  