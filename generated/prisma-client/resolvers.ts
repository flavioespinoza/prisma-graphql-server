// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo, GraphQLIsTypeOfFn } from "graphql";
import {
  Attribute,
  TaxId,
  User,
  IdProof,
  Email,
  PhoneNumber,
  AttributeConnection,
  PageInfo,
  AttributeEdge,
  AggregateAttribute,
  EmailConnection,
  EmailEdge,
  AggregateEmail,
  PhoneNumberConnection,
  PhoneNumberEdge,
  AggregatePhoneNumber,
  IdProofConnection,
  IdProofEdge,
  AggregateIdProof,
  TaxIdConnection,
  TaxIdEdge,
  AggregateTaxId,
  UserConnection,
  UserEdge,
  AggregateUser,
  BatchPayload,
  AttributeSubscriptionPayload,
  AttributePreviousValues,
  EmailSubscriptionPayload,
  EmailPreviousValues,
  PhoneNumberSubscriptionPayload,
  PhoneNumberPreviousValues,
  IdProofSubscriptionPayload,
  IdProofPreviousValues,
  TaxIdSubscriptionPayload,
  TaxIdPreviousValues,
  UserSubscriptionPayload,
  UserPreviousValues
} from ".";
type Context = any;

export type AuthLevel = "ADMIN" | "USER" | "PROSPECT" | "BLACKLISTED";
export type AttributeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "attr_type_ASC"
  | "attr_type_DESC";
export type TaxIdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";
export type EmailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";
export type PhoneNumberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";
export type IdProofOrderByInput = "id_ASC" | "id_DESC";
export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "role_ASC"
  | "role_DESC";
export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface AttributeWhereInput {
    AND?: AttributeWhereInput[] | null;
    OR?: AttributeWhereInput[] | null;
    NOT?: AttributeWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    attr_type?: string | null;
    attr_type_not?: string | null;
    attr_type_in?: string[] | null;
    attr_type_not_in?: string[] | null;
    attr_type_lt?: string | null;
    attr_type_lte?: string | null;
    attr_type_gt?: string | null;
    attr_type_gte?: string | null;
    attr_type_contains?: string | null;
    attr_type_not_contains?: string | null;
    attr_type_starts_with?: string | null;
    attr_type_not_starts_with?: string | null;
    attr_type_ends_with?: string | null;
    attr_type_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }
  export interface EmailWhereInput {
    AND?: EmailWhereInput[] | null;
    OR?: EmailWhereInput[] | null;
    NOT?: EmailWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface PhoneNumberWhereInput {
    AND?: PhoneNumberWhereInput[] | null;
    OR?: PhoneNumberWhereInput[] | null;
    NOT?: PhoneNumberWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface IdProofWhereInput {
    AND?: IdProofWhereInput[] | null;
    OR?: IdProofWhereInput[] | null;
    NOT?: IdProofWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }
  export interface TaxIdWhereInput {
    AND?: TaxIdWhereInput[] | null;
    OR?: TaxIdWhereInput[] | null;
    NOT?: TaxIdWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
  }
  export interface UserWhereInput {
    AND?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    NOT?: UserWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    name?: string | null;
    name_not?: string | null;
    name_in?: string[] | null;
    name_not_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_contains?: string | null;
    name_not_contains?: string | null;
    name_starts_with?: string | null;
    name_not_starts_with?: string | null;
    name_ends_with?: string | null;
    name_not_ends_with?: string | null;
    role?: AuthLevel | null;
    role_not?: AuthLevel | null;
    role_in?: AuthLevel[] | null;
    role_not_in?: AuthLevel[] | null;
    id_proof?: IdProofWhereInput | null;
  }
  export interface AttributeWhereUniqueInput {
    id?: string | null;
  }
  export interface EmailWhereUniqueInput {
    id?: string | null;
  }
  export interface PhoneNumberWhereUniqueInput {
    id?: string | null;
  }
  export interface IdProofWhereUniqueInput {
    id?: string | null;
  }
  export interface TaxIdWhereUniqueInput {
    id?: string | null;
  }
  export interface UserWhereUniqueInput {
    id?: string | null;
    email?: string | null;
  }

  export interface ArgsAttributes {
    where?: AttributeWhereInput | null;
    orderBy?: AttributeOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsEmails {
    where?: EmailWhereInput | null;
    orderBy?: EmailOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsPhoneNumbers {
    where?: PhoneNumberWhereInput | null;
    orderBy?: PhoneNumberOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsIdProofs {
    where?: IdProofWhereInput | null;
    orderBy?: IdProofOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsTaxIds {
    where?: TaxIdWhereInput | null;
    orderBy?: TaxIdOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsUsers {
    where?: UserWhereInput | null;
    orderBy?: UserOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsAttribute {
    where: AttributeWhereUniqueInput;
  }

  export interface ArgsEmail {
    where: EmailWhereUniqueInput;
  }

  export interface ArgsPhoneNumber {
    where: PhoneNumberWhereUniqueInput;
  }

  export interface ArgsIdProof {
    where: IdProofWhereUniqueInput;
  }

  export interface ArgsTaxId {
    where: TaxIdWhereUniqueInput;
  }

  export interface ArgsUser {
    where: UserWhereUniqueInput;
  }

  export interface ArgsAttributesConnection {
    where?: AttributeWhereInput | null;
    orderBy?: AttributeOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsEmailsConnection {
    where?: EmailWhereInput | null;
    orderBy?: EmailOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsPhoneNumbersConnection {
    where?: PhoneNumberWhereInput | null;
    orderBy?: PhoneNumberOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsIdProofsConnection {
    where?: IdProofWhereInput | null;
    orderBy?: IdProofOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsTaxIdsConnection {
    where?: TaxIdWhereInput | null;
    orderBy?: TaxIdOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsUsersConnection {
    where?: UserWhereInput | null;
    orderBy?: UserOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsNode {
    id: string;
  }

  export type AttributesResolver =
    | ((
        parent: undefined,
        args: ArgsAttributes,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Attribute | null> | Promise<Array<Attribute | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsAttributes,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Attribute | null> | Promise<Array<Attribute | null>>;
      };

  export type EmailsResolver =
    | ((
        parent: undefined,
        args: ArgsEmails,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<Email | null> | Promise<Array<Email | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsEmails,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Email | null> | Promise<Array<Email | null>>;
      };

  export type PhoneNumbersResolver =
    | ((
        parent: undefined,
        args: ArgsPhoneNumbers,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<PhoneNumber | null> | Promise<Array<PhoneNumber | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPhoneNumbers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<PhoneNumber | null> | Promise<Array<PhoneNumber | null>>;
      };

  export type IdProofsResolver =
    | ((
        parent: undefined,
        args: ArgsIdProofs,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<IdProof | null> | Promise<Array<IdProof | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsIdProofs,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<IdProof | null> | Promise<Array<IdProof | null>>;
      };

  export type TaxIdsResolver =
    | ((
        parent: undefined,
        args: ArgsTaxIds,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<TaxId | null> | Promise<Array<TaxId | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsTaxIds,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<TaxId | null> | Promise<Array<TaxId | null>>;
      };

  export type UsersResolver =
    | ((
        parent: undefined,
        args: ArgsUsers,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<User | null> | Promise<Array<User | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<User | null> | Promise<Array<User | null>>;
      };

  export type AttributeResolver =
    | ((
        parent: undefined,
        args: ArgsAttribute,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Attribute | null | Promise<Attribute | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | null | Promise<Attribute | null>;
      };

  export type EmailResolver =
    | ((
        parent: undefined,
        args: ArgsEmail,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Email | null | Promise<Email | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | null | Promise<Email | null>;
      };

  export type PhoneNumberResolver =
    | ((
        parent: undefined,
        args: ArgsPhoneNumber,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PhoneNumber | null | Promise<PhoneNumber | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPhoneNumber,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | null | Promise<PhoneNumber | null>;
      };

  export type IdProofResolver =
    | ((
        parent: undefined,
        args: ArgsIdProof,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => IdProof | null | Promise<IdProof | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsIdProof,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | null | Promise<IdProof | null>;
      };

  export type TaxIdResolver =
    | ((
        parent: undefined,
        args: ArgsTaxId,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TaxId | null | Promise<TaxId | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsTaxId,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | null | Promise<TaxId | null>;
      };

  export type UserResolver =
    | ((
        parent: undefined,
        args: ArgsUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type AttributesConnectionResolver =
    | ((
        parent: undefined,
        args: ArgsAttributesConnection,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AttributeConnection | Promise<AttributeConnection>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsAttributesConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AttributeConnection | Promise<AttributeConnection>;
      };

  export type EmailsConnectionResolver =
    | ((
        parent: undefined,
        args: ArgsEmailsConnection,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => EmailConnection | Promise<EmailConnection>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsEmailsConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => EmailConnection | Promise<EmailConnection>;
      };

  export type PhoneNumbersConnectionResolver =
    | ((
        parent: undefined,
        args: ArgsPhoneNumbersConnection,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PhoneNumberConnection | Promise<PhoneNumberConnection>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsPhoneNumbersConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumberConnection | Promise<PhoneNumberConnection>;
      };

  export type IdProofsConnectionResolver =
    | ((
        parent: undefined,
        args: ArgsIdProofsConnection,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => IdProofConnection | Promise<IdProofConnection>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsIdProofsConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProofConnection | Promise<IdProofConnection>;
      };

  export type TaxIdsConnectionResolver =
    | ((
        parent: undefined,
        args: ArgsTaxIdsConnection,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TaxIdConnection | Promise<TaxIdConnection>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsTaxIdsConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxIdConnection | Promise<TaxIdConnection>;
      };

  export type UsersConnectionResolver =
    | ((
        parent: undefined,
        args: ArgsUsersConnection,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UserConnection | Promise<UserConnection>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUsersConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserConnection | Promise<UserConnection>;
      };

  export type NodeResolver =
    | ((
        parent: undefined,
        args: ArgsNode,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | Attribute
        | TaxId
        | User
        | IdProof
        | Email
        | PhoneNumber
        | null
        | Promise<
            Attribute | TaxId | User | IdProof | Email | PhoneNumber | null
          >
      )
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsNode,
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | Attribute
          | TaxId
          | User
          | IdProof
          | Email
          | PhoneNumber
          | null
          | Promise<
              Attribute | TaxId | User | IdProof | Email | PhoneNumber | null
            >;
      };

  export interface Type {
    attributes:
      | ((
          parent: undefined,
          args: ArgsAttributes,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Attribute | null> | Promise<Array<Attribute | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsAttributes,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<Attribute | null> | Promise<Array<Attribute | null>>;
        };

    emails:
      | ((
          parent: undefined,
          args: ArgsEmails,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<Email | null> | Promise<Array<Email | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsEmails,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<Email | null> | Promise<Array<Email | null>>;
        };

    phoneNumbers:
      | ((
          parent: undefined,
          args: ArgsPhoneNumbers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<PhoneNumber | null> | Promise<Array<PhoneNumber | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPhoneNumbers,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<PhoneNumber | null> | Promise<Array<PhoneNumber | null>>;
        };

    idProofs:
      | ((
          parent: undefined,
          args: ArgsIdProofs,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<IdProof | null> | Promise<Array<IdProof | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsIdProofs,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<IdProof | null> | Promise<Array<IdProof | null>>;
        };

    taxIds:
      | ((
          parent: undefined,
          args: ArgsTaxIds,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<TaxId | null> | Promise<Array<TaxId | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsTaxIds,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<TaxId | null> | Promise<Array<TaxId | null>>;
        };

    users:
      | ((
          parent: undefined,
          args: ArgsUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<User | null> | Promise<Array<User | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUsers,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<User | null> | Promise<Array<User | null>>;
        };

    attribute:
      | ((
          parent: undefined,
          args: ArgsAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | null | Promise<Attribute | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsAttribute,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Attribute | null | Promise<Attribute | null>;
        };

    email:
      | ((
          parent: undefined,
          args: ArgsEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | null | Promise<Email | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsEmail,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Email | null | Promise<Email | null>;
        };

    phoneNumber:
      | ((
          parent: undefined,
          args: ArgsPhoneNumber,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | null | Promise<PhoneNumber | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPhoneNumber,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PhoneNumber | null | Promise<PhoneNumber | null>;
        };

    idProof:
      | ((
          parent: undefined,
          args: ArgsIdProof,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | null | Promise<IdProof | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsIdProof,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => IdProof | null | Promise<IdProof | null>;
        };

    taxId:
      | ((
          parent: undefined,
          args: ArgsTaxId,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | null | Promise<TaxId | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsTaxId,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => TaxId | null | Promise<TaxId | null>;
        };

    user:
      | ((
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    attributesConnection:
      | ((
          parent: undefined,
          args: ArgsAttributesConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AttributeConnection | Promise<AttributeConnection>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsAttributesConnection,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AttributeConnection | Promise<AttributeConnection>;
        };

    emailsConnection:
      | ((
          parent: undefined,
          args: ArgsEmailsConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => EmailConnection | Promise<EmailConnection>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsEmailsConnection,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => EmailConnection | Promise<EmailConnection>;
        };

    phoneNumbersConnection:
      | ((
          parent: undefined,
          args: ArgsPhoneNumbersConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumberConnection | Promise<PhoneNumberConnection>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsPhoneNumbersConnection,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PhoneNumberConnection | Promise<PhoneNumberConnection>;
        };

    idProofsConnection:
      | ((
          parent: undefined,
          args: ArgsIdProofsConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProofConnection | Promise<IdProofConnection>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsIdProofsConnection,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => IdProofConnection | Promise<IdProofConnection>;
        };

    taxIdsConnection:
      | ((
          parent: undefined,
          args: ArgsTaxIdsConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxIdConnection | Promise<TaxIdConnection>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsTaxIdsConnection,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => TaxIdConnection | Promise<TaxIdConnection>;
        };

    usersConnection:
      | ((
          parent: undefined,
          args: ArgsUsersConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserConnection | Promise<UserConnection>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUsersConnection,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UserConnection | Promise<UserConnection>;
        };

    node:
      | ((
          parent: undefined,
          args: ArgsNode,
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | Attribute
          | TaxId
          | User
          | IdProof
          | Email
          | PhoneNumber
          | null
          | Promise<
              Attribute | TaxId | User | IdProof | Email | PhoneNumber | null
            >
        )
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsNode,
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | Attribute
            | TaxId
            | User
            | IdProof
            | Email
            | PhoneNumber
            | null
            | Promise<
                Attribute | TaxId | User | IdProof | Email | PhoneNumber | null
              >;
        };
  }
}

export namespace AttributeResolvers {
  export const defaultResolvers = {
    id: (parent: Attribute) => parent.id,
    attr_type: (parent: Attribute) => parent.attr_type
  };

  export interface TaxIdWhereInput {
    AND?: TaxIdWhereInput[] | null;
    OR?: TaxIdWhereInput[] | null;
    NOT?: TaxIdWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
  }
  export interface EmailWhereInput {
    AND?: EmailWhereInput[] | null;
    OR?: EmailWhereInput[] | null;
    NOT?: EmailWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface PhoneNumberWhereInput {
    AND?: PhoneNumberWhereInput[] | null;
    OR?: PhoneNumberWhereInput[] | null;
    NOT?: PhoneNumberWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface UserWhereInput {
    AND?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    NOT?: UserWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    name?: string | null;
    name_not?: string | null;
    name_in?: string[] | null;
    name_not_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_contains?: string | null;
    name_not_contains?: string | null;
    name_starts_with?: string | null;
    name_not_starts_with?: string | null;
    name_ends_with?: string | null;
    name_not_ends_with?: string | null;
    role?: AuthLevel | null;
    role_not?: AuthLevel | null;
    role_in?: AuthLevel[] | null;
    role_not_in?: AuthLevel[] | null;
    id_proof?: IdProofWhereInput | null;
  }
  export interface AttributeWhereInput {
    AND?: AttributeWhereInput[] | null;
    OR?: AttributeWhereInput[] | null;
    NOT?: AttributeWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    attr_type?: string | null;
    attr_type_not?: string | null;
    attr_type_in?: string[] | null;
    attr_type_not_in?: string[] | null;
    attr_type_lt?: string | null;
    attr_type_lte?: string | null;
    attr_type_gt?: string | null;
    attr_type_gte?: string | null;
    attr_type_contains?: string | null;
    attr_type_not_contains?: string | null;
    attr_type_starts_with?: string | null;
    attr_type_not_starts_with?: string | null;
    attr_type_ends_with?: string | null;
    attr_type_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }
  export interface IdProofWhereInput {
    AND?: IdProofWhereInput[] | null;
    OR?: IdProofWhereInput[] | null;
    NOT?: IdProofWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }

  export interface ArgsTax_id {
    where?: TaxIdWhereInput | null;
    orderBy?: TaxIdOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsEmail {
    where?: EmailWhereInput | null;
    orderBy?: EmailOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsPhone_number {
    where?: PhoneNumberWhereInput | null;
    orderBy?: PhoneNumberOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export type IdResolver =
    | ((
        parent: Attribute,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Attribute,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type Attr_typeResolver =
    | ((
        parent: Attribute,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Attribute,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type Tax_idResolver =
    | ((
        parent: Attribute,
        args: ArgsTax_id,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TaxId[] | null | Promise<TaxId[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: Attribute,
          args: ArgsTax_id,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId[] | null | Promise<TaxId[] | null>;
      };

  export type EmailResolver =
    | ((
        parent: Attribute,
        args: ArgsEmail,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Email[] | null | Promise<Email[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: Attribute,
          args: ArgsEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email[] | null | Promise<Email[] | null>;
      };

  export type Phone_numberResolver =
    | ((
        parent: Attribute,
        args: ArgsPhone_number,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PhoneNumber[] | null | Promise<PhoneNumber[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: Attribute,
          args: ArgsPhone_number,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber[] | null | Promise<PhoneNumber[] | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Attribute,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Attribute,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    attr_type:
      | ((
          parent: Attribute,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Attribute,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    tax_id:
      | ((
          parent: Attribute,
          args: ArgsTax_id,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId[] | null | Promise<TaxId[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: Attribute,
            args: ArgsTax_id,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => TaxId[] | null | Promise<TaxId[] | null>;
        };

    email:
      | ((
          parent: Attribute,
          args: ArgsEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email[] | null | Promise<Email[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: Attribute,
            args: ArgsEmail,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Email[] | null | Promise<Email[] | null>;
        };

    phone_number:
      | ((
          parent: Attribute,
          args: ArgsPhone_number,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber[] | null | Promise<PhoneNumber[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: Attribute,
            args: ArgsPhone_number,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PhoneNumber[] | null | Promise<PhoneNumber[] | null>;
        };

    __isTypeOf?: GraphQLIsTypeOfFn<
      Attribute | TaxId | User | IdProof | Email | PhoneNumber,
      Context
    >;
  }
}

export namespace TaxIdResolvers {
  export const defaultResolvers = {
    id: (parent: TaxId) => parent.id,
    createdAt: (parent: TaxId) => parent.createdAt,
    updatedAt: (parent: TaxId) => parent.updatedAt
  };

  export type IdResolver =
    | ((
        parent: TaxId,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: TaxId,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: TaxId,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: TaxId,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: TaxId,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: TaxId,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type OwnerResolver =
    | ((
        parent: TaxId,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: TaxId,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export interface Type {
    id:
      | ((
          parent: TaxId,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: TaxId,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: TaxId,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: TaxId,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: TaxId,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: TaxId,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    owner:
      | ((
          parent: TaxId,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: TaxId,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    __isTypeOf?: GraphQLIsTypeOfFn<
      Attribute | TaxId | User | IdProof | Email | PhoneNumber,
      Context
    >;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    createdAt: (parent: User) => parent.createdAt,
    updatedAt: (parent: User) => parent.updatedAt,
    email: (parent: User) => parent.email,
    name: (parent: User) => (parent.name === undefined ? null : parent.name),
    role: (parent: User) => (parent.role === undefined ? null : parent.role)
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type RoleResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthLevel | null | Promise<AuthLevel | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthLevel | null | Promise<AuthLevel | null>;
      };

  export type Id_proofResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => IdProof | null | Promise<IdProof | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | null | Promise<IdProof | null>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    role:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthLevel | null | Promise<AuthLevel | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthLevel | null | Promise<AuthLevel | null>;
        };

    id_proof:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | null | Promise<IdProof | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => IdProof | null | Promise<IdProof | null>;
        };

    __isTypeOf?: GraphQLIsTypeOfFn<
      Attribute | TaxId | User | IdProof | Email | PhoneNumber,
      Context
    >;
  }
}

export namespace IdProofResolvers {
  export const defaultResolvers = {
    id: (parent: IdProof) => parent.id
  };

  export interface TaxIdWhereInput {
    AND?: TaxIdWhereInput[] | null;
    OR?: TaxIdWhereInput[] | null;
    NOT?: TaxIdWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
  }
  export interface EmailWhereInput {
    AND?: EmailWhereInput[] | null;
    OR?: EmailWhereInput[] | null;
    NOT?: EmailWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface PhoneNumberWhereInput {
    AND?: PhoneNumberWhereInput[] | null;
    OR?: PhoneNumberWhereInput[] | null;
    NOT?: PhoneNumberWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface UserWhereInput {
    AND?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    NOT?: UserWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    name?: string | null;
    name_not?: string | null;
    name_in?: string[] | null;
    name_not_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_contains?: string | null;
    name_not_contains?: string | null;
    name_starts_with?: string | null;
    name_not_starts_with?: string | null;
    name_ends_with?: string | null;
    name_not_ends_with?: string | null;
    role?: AuthLevel | null;
    role_not?: AuthLevel | null;
    role_in?: AuthLevel[] | null;
    role_not_in?: AuthLevel[] | null;
    id_proof?: IdProofWhereInput | null;
  }
  export interface AttributeWhereInput {
    AND?: AttributeWhereInput[] | null;
    OR?: AttributeWhereInput[] | null;
    NOT?: AttributeWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    attr_type?: string | null;
    attr_type_not?: string | null;
    attr_type_in?: string[] | null;
    attr_type_not_in?: string[] | null;
    attr_type_lt?: string | null;
    attr_type_lte?: string | null;
    attr_type_gt?: string | null;
    attr_type_gte?: string | null;
    attr_type_contains?: string | null;
    attr_type_not_contains?: string | null;
    attr_type_starts_with?: string | null;
    attr_type_not_starts_with?: string | null;
    attr_type_ends_with?: string | null;
    attr_type_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }
  export interface IdProofWhereInput {
    AND?: IdProofWhereInput[] | null;
    OR?: IdProofWhereInput[] | null;
    NOT?: IdProofWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }

  export interface ArgsTax_id {
    where?: TaxIdWhereInput | null;
    orderBy?: TaxIdOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsEmail {
    where?: EmailWhereInput | null;
    orderBy?: EmailOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsPhone_number {
    where?: PhoneNumberWhereInput | null;
    orderBy?: PhoneNumberOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export type IdResolver =
    | ((
        parent: IdProof,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: IdProof,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type Tax_idResolver =
    | ((
        parent: IdProof,
        args: ArgsTax_id,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TaxId[] | null | Promise<TaxId[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: IdProof,
          args: ArgsTax_id,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId[] | null | Promise<TaxId[] | null>;
      };

  export type EmailResolver =
    | ((
        parent: IdProof,
        args: ArgsEmail,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Email[] | null | Promise<Email[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: IdProof,
          args: ArgsEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email[] | null | Promise<Email[] | null>;
      };

  export type Phone_numberResolver =
    | ((
        parent: IdProof,
        args: ArgsPhone_number,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PhoneNumber[] | null | Promise<PhoneNumber[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: IdProof,
          args: ArgsPhone_number,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber[] | null | Promise<PhoneNumber[] | null>;
      };

  export interface Type {
    id:
      | ((
          parent: IdProof,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: IdProof,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    tax_id:
      | ((
          parent: IdProof,
          args: ArgsTax_id,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId[] | null | Promise<TaxId[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: IdProof,
            args: ArgsTax_id,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => TaxId[] | null | Promise<TaxId[] | null>;
        };

    email:
      | ((
          parent: IdProof,
          args: ArgsEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email[] | null | Promise<Email[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: IdProof,
            args: ArgsEmail,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Email[] | null | Promise<Email[] | null>;
        };

    phone_number:
      | ((
          parent: IdProof,
          args: ArgsPhone_number,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber[] | null | Promise<PhoneNumber[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: IdProof,
            args: ArgsPhone_number,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PhoneNumber[] | null | Promise<PhoneNumber[] | null>;
        };

    __isTypeOf?: GraphQLIsTypeOfFn<
      Attribute | TaxId | User | IdProof | Email | PhoneNumber,
      Context
    >;
  }
}

export namespace EmailResolvers {
  export const defaultResolvers = {
    id: (parent: Email) => parent.id,
    createdAt: (parent: Email) => parent.createdAt,
    updatedAt: (parent: Email) => parent.updatedAt
  };

  export interface AttributeWhereInput {
    AND?: AttributeWhereInput[] | null;
    OR?: AttributeWhereInput[] | null;
    NOT?: AttributeWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    attr_type?: string | null;
    attr_type_not?: string | null;
    attr_type_in?: string[] | null;
    attr_type_not_in?: string[] | null;
    attr_type_lt?: string | null;
    attr_type_lte?: string | null;
    attr_type_gt?: string | null;
    attr_type_gte?: string | null;
    attr_type_contains?: string | null;
    attr_type_not_contains?: string | null;
    attr_type_starts_with?: string | null;
    attr_type_not_starts_with?: string | null;
    attr_type_ends_with?: string | null;
    attr_type_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }
  export interface TaxIdWhereInput {
    AND?: TaxIdWhereInput[] | null;
    OR?: TaxIdWhereInput[] | null;
    NOT?: TaxIdWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
  }
  export interface EmailWhereInput {
    AND?: EmailWhereInput[] | null;
    OR?: EmailWhereInput[] | null;
    NOT?: EmailWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface PhoneNumberWhereInput {
    AND?: PhoneNumberWhereInput[] | null;
    OR?: PhoneNumberWhereInput[] | null;
    NOT?: PhoneNumberWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface UserWhereInput {
    AND?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    NOT?: UserWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    name?: string | null;
    name_not?: string | null;
    name_in?: string[] | null;
    name_not_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_contains?: string | null;
    name_not_contains?: string | null;
    name_starts_with?: string | null;
    name_not_starts_with?: string | null;
    name_ends_with?: string | null;
    name_not_ends_with?: string | null;
    role?: AuthLevel | null;
    role_not?: AuthLevel | null;
    role_in?: AuthLevel[] | null;
    role_not_in?: AuthLevel[] | null;
    id_proof?: IdProofWhereInput | null;
  }
  export interface IdProofWhereInput {
    AND?: IdProofWhereInput[] | null;
    OR?: IdProofWhereInput[] | null;
    NOT?: IdProofWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }

  export interface ArgsAttribute {
    where?: AttributeWhereInput | null;
    orderBy?: AttributeOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export type IdResolver =
    | ((
        parent: Email,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Email,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Email,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Email,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: Email,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Email,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type OwnerResolver =
    | ((
        parent: Email,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Email,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type AttributeResolver =
    | ((
        parent: Email,
        args: ArgsAttribute,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Attribute[] | null | Promise<Attribute[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: Email,
          args: ArgsAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute[] | null | Promise<Attribute[] | null>;
      };

  export interface Type {
    id:
      | ((
          parent: Email,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Email,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: Email,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Email,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: Email,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Email,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    owner:
      | ((
          parent: Email,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Email,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    attribute:
      | ((
          parent: Email,
          args: ArgsAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute[] | null | Promise<Attribute[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: Email,
            args: ArgsAttribute,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Attribute[] | null | Promise<Attribute[] | null>;
        };

    __isTypeOf?: GraphQLIsTypeOfFn<
      Attribute | TaxId | User | IdProof | Email | PhoneNumber,
      Context
    >;
  }
}

export namespace PhoneNumberResolvers {
  export const defaultResolvers = {
    id: (parent: PhoneNumber) => parent.id,
    createdAt: (parent: PhoneNumber) => parent.createdAt,
    updatedAt: (parent: PhoneNumber) => parent.updatedAt
  };

  export interface AttributeWhereInput {
    AND?: AttributeWhereInput[] | null;
    OR?: AttributeWhereInput[] | null;
    NOT?: AttributeWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    attr_type?: string | null;
    attr_type_not?: string | null;
    attr_type_in?: string[] | null;
    attr_type_not_in?: string[] | null;
    attr_type_lt?: string | null;
    attr_type_lte?: string | null;
    attr_type_gt?: string | null;
    attr_type_gte?: string | null;
    attr_type_contains?: string | null;
    attr_type_not_contains?: string | null;
    attr_type_starts_with?: string | null;
    attr_type_not_starts_with?: string | null;
    attr_type_ends_with?: string | null;
    attr_type_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }
  export interface TaxIdWhereInput {
    AND?: TaxIdWhereInput[] | null;
    OR?: TaxIdWhereInput[] | null;
    NOT?: TaxIdWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
  }
  export interface EmailWhereInput {
    AND?: EmailWhereInput[] | null;
    OR?: EmailWhereInput[] | null;
    NOT?: EmailWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface PhoneNumberWhereInput {
    AND?: PhoneNumberWhereInput[] | null;
    OR?: PhoneNumberWhereInput[] | null;
    NOT?: PhoneNumberWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface UserWhereInput {
    AND?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    NOT?: UserWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    name?: string | null;
    name_not?: string | null;
    name_in?: string[] | null;
    name_not_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_contains?: string | null;
    name_not_contains?: string | null;
    name_starts_with?: string | null;
    name_not_starts_with?: string | null;
    name_ends_with?: string | null;
    name_not_ends_with?: string | null;
    role?: AuthLevel | null;
    role_not?: AuthLevel | null;
    role_in?: AuthLevel[] | null;
    role_not_in?: AuthLevel[] | null;
    id_proof?: IdProofWhereInput | null;
  }
  export interface IdProofWhereInput {
    AND?: IdProofWhereInput[] | null;
    OR?: IdProofWhereInput[] | null;
    NOT?: IdProofWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }

  export interface ArgsAttribute {
    where?: AttributeWhereInput | null;
    orderBy?: AttributeOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export type IdResolver =
    | ((
        parent: PhoneNumber,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumber,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: PhoneNumber,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumber,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: PhoneNumber,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumber,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type OwnerResolver =
    | ((
        parent: PhoneNumber,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumber,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type AttributeResolver =
    | ((
        parent: PhoneNumber,
        args: ArgsAttribute,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Attribute[] | null | Promise<Attribute[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumber,
          args: ArgsAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute[] | null | Promise<Attribute[] | null>;
      };

  export interface Type {
    id:
      | ((
          parent: PhoneNumber,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumber,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: PhoneNumber,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumber,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: PhoneNumber,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumber,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    owner:
      | ((
          parent: PhoneNumber,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumber,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    attribute:
      | ((
          parent: PhoneNumber,
          args: ArgsAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute[] | null | Promise<Attribute[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumber,
            args: ArgsAttribute,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Attribute[] | null | Promise<Attribute[] | null>;
        };

    __isTypeOf?: GraphQLIsTypeOfFn<
      Attribute | TaxId | User | IdProof | Email | PhoneNumber,
      Context
    >;
  }
}

export namespace AttributeConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: AttributeConnection) => parent.pageInfo,
    edges: (parent: AttributeConnection) => parent.edges
  };

  export type PageInfoResolver =
    | ((
        parent: AttributeConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PageInfo | Promise<PageInfo>)
    | {
        fragment: string;
        resolve: (
          parent: AttributeConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>;
      };

  export type EdgesResolver =
    | ((
        parent: AttributeConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<AttributeEdge | null> | Promise<Array<AttributeEdge | null>>)
    | {
        fragment: string;
        resolve: (
          parent: AttributeConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<AttributeEdge | null> | Promise<Array<AttributeEdge | null>>;
      };

  export type AggregateResolver =
    | ((
        parent: AttributeConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AggregateAttribute | Promise<AggregateAttribute>)
    | {
        fragment: string;
        resolve: (
          parent: AttributeConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateAttribute | Promise<AggregateAttribute>;
      };

  export interface Type {
    pageInfo:
      | ((
          parent: AttributeConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>)
      | {
          fragment: string;
          resolve: (
            parent: AttributeConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PageInfo | Promise<PageInfo>;
        };

    edges:
      | ((
          parent: AttributeConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<AttributeEdge | null> | Promise<Array<AttributeEdge | null>>)
      | {
          fragment: string;
          resolve: (
            parent: AttributeConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | Array<AttributeEdge | null>
            | Promise<Array<AttributeEdge | null>>;
        };

    aggregate:
      | ((
          parent: AttributeConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateAttribute | Promise<AggregateAttribute>)
      | {
          fragment: string;
          resolve: (
            parent: AttributeConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AggregateAttribute | Promise<AggregateAttribute>;
        };
  }
}

export namespace PageInfoResolvers {
  export const defaultResolvers = {
    hasNextPage: (parent: PageInfo) => parent.hasNextPage,
    hasPreviousPage: (parent: PageInfo) => parent.hasPreviousPage,
    startCursor: (parent: PageInfo) =>
      parent.startCursor === undefined ? null : parent.startCursor,
    endCursor: (parent: PageInfo) =>
      parent.endCursor === undefined ? null : parent.endCursor
  };

  export type HasNextPageResolver =
    | ((
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type HasPreviousPageResolver =
    | ((
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type StartCursorResolver =
    | ((
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type EndCursorResolver =
    | ((
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    hasNextPage:
      | ((
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: PageInfo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    hasPreviousPage:
      | ((
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: PageInfo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    startCursor:
      | ((
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: PageInfo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    endCursor:
      | ((
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: PageInfo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };
  }
}

export namespace AttributeEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: AttributeEdge) => parent.node,
    cursor: (parent: AttributeEdge) => parent.cursor
  };

  export type NodeResolver =
    | ((
        parent: AttributeEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Attribute | Promise<Attribute>)
    | {
        fragment: string;
        resolve: (
          parent: AttributeEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | Promise<Attribute>;
      };

  export type CursorResolver =
    | ((
        parent: AttributeEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: AttributeEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    node:
      | ((
          parent: AttributeEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | Promise<Attribute>)
      | {
          fragment: string;
          resolve: (
            parent: AttributeEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Attribute | Promise<Attribute>;
        };

    cursor:
      | ((
          parent: AttributeEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: AttributeEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace AggregateAttributeResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateAttribute) => parent.count
  };

  export type CountResolver =
    | ((
        parent: AggregateAttribute,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: AggregateAttribute,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export interface Type {
    count:
      | ((
          parent: AggregateAttribute,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: AggregateAttribute,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };
  }
}

export namespace EmailConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: EmailConnection) => parent.pageInfo,
    edges: (parent: EmailConnection) => parent.edges
  };

  export type PageInfoResolver =
    | ((
        parent: EmailConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PageInfo | Promise<PageInfo>)
    | {
        fragment: string;
        resolve: (
          parent: EmailConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>;
      };

  export type EdgesResolver =
    | ((
        parent: EmailConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<EmailEdge | null> | Promise<Array<EmailEdge | null>>)
    | {
        fragment: string;
        resolve: (
          parent: EmailConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<EmailEdge | null> | Promise<Array<EmailEdge | null>>;
      };

  export type AggregateResolver =
    | ((
        parent: EmailConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AggregateEmail | Promise<AggregateEmail>)
    | {
        fragment: string;
        resolve: (
          parent: EmailConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateEmail | Promise<AggregateEmail>;
      };

  export interface Type {
    pageInfo:
      | ((
          parent: EmailConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>)
      | {
          fragment: string;
          resolve: (
            parent: EmailConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PageInfo | Promise<PageInfo>;
        };

    edges:
      | ((
          parent: EmailConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<EmailEdge | null> | Promise<Array<EmailEdge | null>>)
      | {
          fragment: string;
          resolve: (
            parent: EmailConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<EmailEdge | null> | Promise<Array<EmailEdge | null>>;
        };

    aggregate:
      | ((
          parent: EmailConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateEmail | Promise<AggregateEmail>)
      | {
          fragment: string;
          resolve: (
            parent: EmailConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AggregateEmail | Promise<AggregateEmail>;
        };
  }
}

export namespace EmailEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: EmailEdge) => parent.node,
    cursor: (parent: EmailEdge) => parent.cursor
  };

  export type NodeResolver =
    | ((
        parent: EmailEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Email | Promise<Email>)
    | {
        fragment: string;
        resolve: (
          parent: EmailEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | Promise<Email>;
      };

  export type CursorResolver =
    | ((
        parent: EmailEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: EmailEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    node:
      | ((
          parent: EmailEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | Promise<Email>)
      | {
          fragment: string;
          resolve: (
            parent: EmailEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Email | Promise<Email>;
        };

    cursor:
      | ((
          parent: EmailEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: EmailEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace AggregateEmailResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateEmail) => parent.count
  };

  export type CountResolver =
    | ((
        parent: AggregateEmail,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: AggregateEmail,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export interface Type {
    count:
      | ((
          parent: AggregateEmail,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: AggregateEmail,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };
  }
}

export namespace PhoneNumberConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: PhoneNumberConnection) => parent.pageInfo,
    edges: (parent: PhoneNumberConnection) => parent.edges
  };

  export type PageInfoResolver =
    | ((
        parent: PhoneNumberConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PageInfo | Promise<PageInfo>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>;
      };

  export type EdgesResolver =
    | ((
        parent: PhoneNumberConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | Array<PhoneNumberEdge | null>
        | Promise<Array<PhoneNumberEdge | null>>
      )
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | Array<PhoneNumberEdge | null>
          | Promise<Array<PhoneNumberEdge | null>>;
      };

  export type AggregateResolver =
    | ((
        parent: PhoneNumberConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AggregatePhoneNumber | Promise<AggregatePhoneNumber>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregatePhoneNumber | Promise<AggregatePhoneNumber>;
      };

  export interface Type {
    pageInfo:
      | ((
          parent: PhoneNumberConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PageInfo | Promise<PageInfo>;
        };

    edges:
      | ((
          parent: PhoneNumberConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | Array<PhoneNumberEdge | null>
          | Promise<Array<PhoneNumberEdge | null>>
        )
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | Array<PhoneNumberEdge | null>
            | Promise<Array<PhoneNumberEdge | null>>;
        };

    aggregate:
      | ((
          parent: PhoneNumberConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregatePhoneNumber | Promise<AggregatePhoneNumber>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AggregatePhoneNumber | Promise<AggregatePhoneNumber>;
        };
  }
}

export namespace PhoneNumberEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: PhoneNumberEdge) => parent.node,
    cursor: (parent: PhoneNumberEdge) => parent.cursor
  };

  export type NodeResolver =
    | ((
        parent: PhoneNumberEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PhoneNumber | Promise<PhoneNumber>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | Promise<PhoneNumber>;
      };

  export type CursorResolver =
    | ((
        parent: PhoneNumberEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    node:
      | ((
          parent: PhoneNumberEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | Promise<PhoneNumber>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PhoneNumber | Promise<PhoneNumber>;
        };

    cursor:
      | ((
          parent: PhoneNumberEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace AggregatePhoneNumberResolvers {
  export const defaultResolvers = {
    count: (parent: AggregatePhoneNumber) => parent.count
  };

  export type CountResolver =
    | ((
        parent: AggregatePhoneNumber,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: AggregatePhoneNumber,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export interface Type {
    count:
      | ((
          parent: AggregatePhoneNumber,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: AggregatePhoneNumber,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };
  }
}

export namespace IdProofConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: IdProofConnection) => parent.pageInfo,
    edges: (parent: IdProofConnection) => parent.edges
  };

  export type PageInfoResolver =
    | ((
        parent: IdProofConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PageInfo | Promise<PageInfo>)
    | {
        fragment: string;
        resolve: (
          parent: IdProofConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>;
      };

  export type EdgesResolver =
    | ((
        parent: IdProofConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<IdProofEdge | null> | Promise<Array<IdProofEdge | null>>)
    | {
        fragment: string;
        resolve: (
          parent: IdProofConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<IdProofEdge | null> | Promise<Array<IdProofEdge | null>>;
      };

  export type AggregateResolver =
    | ((
        parent: IdProofConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AggregateIdProof | Promise<AggregateIdProof>)
    | {
        fragment: string;
        resolve: (
          parent: IdProofConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateIdProof | Promise<AggregateIdProof>;
      };

  export interface Type {
    pageInfo:
      | ((
          parent: IdProofConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>)
      | {
          fragment: string;
          resolve: (
            parent: IdProofConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PageInfo | Promise<PageInfo>;
        };

    edges:
      | ((
          parent: IdProofConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<IdProofEdge | null> | Promise<Array<IdProofEdge | null>>)
      | {
          fragment: string;
          resolve: (
            parent: IdProofConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<IdProofEdge | null> | Promise<Array<IdProofEdge | null>>;
        };

    aggregate:
      | ((
          parent: IdProofConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateIdProof | Promise<AggregateIdProof>)
      | {
          fragment: string;
          resolve: (
            parent: IdProofConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AggregateIdProof | Promise<AggregateIdProof>;
        };
  }
}

export namespace IdProofEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: IdProofEdge) => parent.node,
    cursor: (parent: IdProofEdge) => parent.cursor
  };

  export type NodeResolver =
    | ((
        parent: IdProofEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => IdProof | Promise<IdProof>)
    | {
        fragment: string;
        resolve: (
          parent: IdProofEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | Promise<IdProof>;
      };

  export type CursorResolver =
    | ((
        parent: IdProofEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: IdProofEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    node:
      | ((
          parent: IdProofEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | Promise<IdProof>)
      | {
          fragment: string;
          resolve: (
            parent: IdProofEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => IdProof | Promise<IdProof>;
        };

    cursor:
      | ((
          parent: IdProofEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: IdProofEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace AggregateIdProofResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateIdProof) => parent.count
  };

  export type CountResolver =
    | ((
        parent: AggregateIdProof,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: AggregateIdProof,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export interface Type {
    count:
      | ((
          parent: AggregateIdProof,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: AggregateIdProof,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };
  }
}

export namespace TaxIdConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: TaxIdConnection) => parent.pageInfo,
    edges: (parent: TaxIdConnection) => parent.edges
  };

  export type PageInfoResolver =
    | ((
        parent: TaxIdConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PageInfo | Promise<PageInfo>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>;
      };

  export type EdgesResolver =
    | ((
        parent: TaxIdConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<TaxIdEdge | null> | Promise<Array<TaxIdEdge | null>>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<TaxIdEdge | null> | Promise<Array<TaxIdEdge | null>>;
      };

  export type AggregateResolver =
    | ((
        parent: TaxIdConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AggregateTaxId | Promise<AggregateTaxId>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateTaxId | Promise<AggregateTaxId>;
      };

  export interface Type {
    pageInfo:
      | ((
          parent: TaxIdConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PageInfo | Promise<PageInfo>;
        };

    edges:
      | ((
          parent: TaxIdConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<TaxIdEdge | null> | Promise<Array<TaxIdEdge | null>>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<TaxIdEdge | null> | Promise<Array<TaxIdEdge | null>>;
        };

    aggregate:
      | ((
          parent: TaxIdConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateTaxId | Promise<AggregateTaxId>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AggregateTaxId | Promise<AggregateTaxId>;
        };
  }
}

export namespace TaxIdEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: TaxIdEdge) => parent.node,
    cursor: (parent: TaxIdEdge) => parent.cursor
  };

  export type NodeResolver =
    | ((
        parent: TaxIdEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TaxId | Promise<TaxId>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | Promise<TaxId>;
      };

  export type CursorResolver =
    | ((
        parent: TaxIdEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    node:
      | ((
          parent: TaxIdEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | Promise<TaxId>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => TaxId | Promise<TaxId>;
        };

    cursor:
      | ((
          parent: TaxIdEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace AggregateTaxIdResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateTaxId) => parent.count
  };

  export type CountResolver =
    | ((
        parent: AggregateTaxId,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: AggregateTaxId,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export interface Type {
    count:
      | ((
          parent: AggregateTaxId,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: AggregateTaxId,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };
  }
}

export namespace UserConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: UserConnection) => parent.pageInfo,
    edges: (parent: UserConnection) => parent.edges
  };

  export type PageInfoResolver =
    | ((
        parent: UserConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PageInfo | Promise<PageInfo>)
    | {
        fragment: string;
        resolve: (
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>;
      };

  export type EdgesResolver =
    | ((
        parent: UserConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<UserEdge | null> | Promise<Array<UserEdge | null>>)
    | {
        fragment: string;
        resolve: (
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<UserEdge | null> | Promise<Array<UserEdge | null>>;
      };

  export type AggregateResolver =
    | ((
        parent: UserConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AggregateUser | Promise<AggregateUser>)
    | {
        fragment: string;
        resolve: (
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateUser | Promise<AggregateUser>;
      };

  export interface Type {
    pageInfo:
      | ((
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>)
      | {
          fragment: string;
          resolve: (
            parent: UserConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PageInfo | Promise<PageInfo>;
        };

    edges:
      | ((
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<UserEdge | null> | Promise<Array<UserEdge | null>>)
      | {
          fragment: string;
          resolve: (
            parent: UserConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<UserEdge | null> | Promise<Array<UserEdge | null>>;
        };

    aggregate:
      | ((
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateUser | Promise<AggregateUser>)
      | {
          fragment: string;
          resolve: (
            parent: UserConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AggregateUser | Promise<AggregateUser>;
        };
  }
}

export namespace UserEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: UserEdge) => parent.node,
    cursor: (parent: UserEdge) => parent.cursor
  };

  export type NodeResolver =
    | ((
        parent: UserEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: UserEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type CursorResolver =
    | ((
        parent: UserEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: UserEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    node:
      | ((
          parent: UserEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: UserEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    cursor:
      | ((
          parent: UserEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: UserEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace AggregateUserResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateUser) => parent.count
  };

  export type CountResolver =
    | ((
        parent: AggregateUser,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: AggregateUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export interface Type {
    count:
      | ((
          parent: AggregateUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: AggregateUser,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface AttributeCreateInput {
    id?: string | null;
    attr_type: string;
    tax_id?: TaxIdCreateManyInput | null;
    email?: EmailCreateManyWithoutAttributeInput | null;
    phone_number?: PhoneNumberCreateManyWithoutAttributeInput | null;
  }
  export interface EmailCreateInput {
    id?: string | null;
    owner: UserCreateOneInput;
    attribute?: AttributeCreateManyWithoutEmailInput | null;
  }
  export interface PhoneNumberCreateInput {
    id?: string | null;
    owner: UserCreateOneInput;
    attribute?: AttributeCreateManyWithoutPhone_numberInput | null;
  }
  export interface IdProofCreateInput {
    id?: string | null;
    tax_id?: TaxIdCreateManyInput | null;
    email?: EmailCreateManyInput | null;
    phone_number?: PhoneNumberCreateManyInput | null;
  }
  export interface TaxIdCreateInput {
    id?: string | null;
    owner: UserCreateOneInput;
  }
  export interface UserCreateInput {
    id?: string | null;
    email: string;
    name?: string | null;
    role?: AuthLevel | null;
    id_proof?: IdProofCreateOneInput | null;
  }
  export interface AttributeUpdateInput {
    attr_type?: string | null;
    tax_id?: TaxIdUpdateManyInput | null;
    email?: EmailUpdateManyWithoutAttributeInput | null;
    phone_number?: PhoneNumberUpdateManyWithoutAttributeInput | null;
  }
  export interface AttributeWhereUniqueInput {
    id?: string | null;
  }
  export interface EmailUpdateInput {
    owner?: UserUpdateOneRequiredInput | null;
    attribute?: AttributeUpdateManyWithoutEmailInput | null;
  }
  export interface EmailWhereUniqueInput {
    id?: string | null;
  }
  export interface PhoneNumberUpdateInput {
    owner?: UserUpdateOneRequiredInput | null;
    attribute?: AttributeUpdateManyWithoutPhone_numberInput | null;
  }
  export interface PhoneNumberWhereUniqueInput {
    id?: string | null;
  }
  export interface IdProofUpdateInput {
    tax_id?: TaxIdUpdateManyInput | null;
    email?: EmailUpdateManyInput | null;
    phone_number?: PhoneNumberUpdateManyInput | null;
  }
  export interface IdProofWhereUniqueInput {
    id?: string | null;
  }
  export interface TaxIdUpdateInput {
    owner?: UserUpdateOneRequiredInput | null;
  }
  export interface TaxIdWhereUniqueInput {
    id?: string | null;
  }
  export interface UserUpdateInput {
    email?: string | null;
    name?: string | null;
    role?: AuthLevel | null;
    id_proof?: IdProofUpdateOneInput | null;
  }
  export interface UserWhereUniqueInput {
    id?: string | null;
    email?: string | null;
  }
  export interface AttributeUpdateManyMutationInput {
    attr_type?: string | null;
  }
  export interface AttributeWhereInput {
    AND?: AttributeWhereInput[] | null;
    OR?: AttributeWhereInput[] | null;
    NOT?: AttributeWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    attr_type?: string | null;
    attr_type_not?: string | null;
    attr_type_in?: string[] | null;
    attr_type_not_in?: string[] | null;
    attr_type_lt?: string | null;
    attr_type_lte?: string | null;
    attr_type_gt?: string | null;
    attr_type_gte?: string | null;
    attr_type_contains?: string | null;
    attr_type_not_contains?: string | null;
    attr_type_starts_with?: string | null;
    attr_type_not_starts_with?: string | null;
    attr_type_ends_with?: string | null;
    attr_type_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }
  export interface UserUpdateManyMutationInput {
    email?: string | null;
    name?: string | null;
    role?: AuthLevel | null;
  }
  export interface UserWhereInput {
    AND?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    NOT?: UserWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    name?: string | null;
    name_not?: string | null;
    name_in?: string[] | null;
    name_not_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_contains?: string | null;
    name_not_contains?: string | null;
    name_starts_with?: string | null;
    name_not_starts_with?: string | null;
    name_ends_with?: string | null;
    name_not_ends_with?: string | null;
    role?: AuthLevel | null;
    role_not?: AuthLevel | null;
    role_in?: AuthLevel[] | null;
    role_not_in?: AuthLevel[] | null;
    id_proof?: IdProofWhereInput | null;
  }
  export interface EmailWhereInput {
    AND?: EmailWhereInput[] | null;
    OR?: EmailWhereInput[] | null;
    NOT?: EmailWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface PhoneNumberWhereInput {
    AND?: PhoneNumberWhereInput[] | null;
    OR?: PhoneNumberWhereInput[] | null;
    NOT?: PhoneNumberWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface IdProofWhereInput {
    AND?: IdProofWhereInput[] | null;
    OR?: IdProofWhereInput[] | null;
    NOT?: IdProofWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }
  export interface TaxIdWhereInput {
    AND?: TaxIdWhereInput[] | null;
    OR?: TaxIdWhereInput[] | null;
    NOT?: TaxIdWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
  }
  export interface TaxIdCreateManyInput {
    create?: TaxIdCreateInput[] | null;
    connect?: TaxIdWhereUniqueInput[] | null;
  }
  export interface EmailCreateManyWithoutAttributeInput {
    create?: EmailCreateWithoutAttributeInput[] | null;
    connect?: EmailWhereUniqueInput[] | null;
  }
  export interface PhoneNumberCreateManyWithoutAttributeInput {
    create?: PhoneNumberCreateWithoutAttributeInput[] | null;
    connect?: PhoneNumberWhereUniqueInput[] | null;
  }
  export interface UserCreateOneInput {
    create?: UserCreateInput | null;
    connect?: UserWhereUniqueInput | null;
  }
  export interface AttributeCreateManyWithoutEmailInput {
    create?: AttributeCreateWithoutEmailInput[] | null;
    connect?: AttributeWhereUniqueInput[] | null;
  }
  export interface AttributeCreateManyWithoutPhone_numberInput {
    create?: AttributeCreateWithoutPhone_numberInput[] | null;
    connect?: AttributeWhereUniqueInput[] | null;
  }
  export interface EmailCreateManyInput {
    create?: EmailCreateInput[] | null;
    connect?: EmailWhereUniqueInput[] | null;
  }
  export interface PhoneNumberCreateManyInput {
    create?: PhoneNumberCreateInput[] | null;
    connect?: PhoneNumberWhereUniqueInput[] | null;
  }
  export interface IdProofCreateOneInput {
    create?: IdProofCreateInput | null;
    connect?: IdProofWhereUniqueInput | null;
  }
  export interface TaxIdUpdateManyInput {
    create?: TaxIdCreateInput[] | null;
    connect?: TaxIdWhereUniqueInput[] | null;
    set?: TaxIdWhereUniqueInput[] | null;
    disconnect?: TaxIdWhereUniqueInput[] | null;
    delete?: TaxIdWhereUniqueInput[] | null;
    update?: TaxIdUpdateWithWhereUniqueNestedInput[] | null;
    deleteMany?: TaxIdScalarWhereInput[] | null;
    upsert?: TaxIdUpsertWithWhereUniqueNestedInput[] | null;
  }
  export interface EmailUpdateManyWithoutAttributeInput {
    create?: EmailCreateWithoutAttributeInput[] | null;
    connect?: EmailWhereUniqueInput[] | null;
    set?: EmailWhereUniqueInput[] | null;
    disconnect?: EmailWhereUniqueInput[] | null;
    delete?: EmailWhereUniqueInput[] | null;
    update?: EmailUpdateWithWhereUniqueWithoutAttributeInput[] | null;
    deleteMany?: EmailScalarWhereInput[] | null;
    upsert?: EmailUpsertWithWhereUniqueWithoutAttributeInput[] | null;
  }
  export interface PhoneNumberUpdateManyWithoutAttributeInput {
    create?: PhoneNumberCreateWithoutAttributeInput[] | null;
    connect?: PhoneNumberWhereUniqueInput[] | null;
    set?: PhoneNumberWhereUniqueInput[] | null;
    disconnect?: PhoneNumberWhereUniqueInput[] | null;
    delete?: PhoneNumberWhereUniqueInput[] | null;
    update?: PhoneNumberUpdateWithWhereUniqueWithoutAttributeInput[] | null;
    deleteMany?: PhoneNumberScalarWhereInput[] | null;
    upsert?: PhoneNumberUpsertWithWhereUniqueWithoutAttributeInput[] | null;
  }
  export interface UserUpdateOneRequiredInput {
    create?: UserCreateInput | null;
    connect?: UserWhereUniqueInput | null;
    update?: UserUpdateDataInput | null;
    upsert?: UserUpsertNestedInput | null;
  }
  export interface AttributeUpdateManyWithoutEmailInput {
    create?: AttributeCreateWithoutEmailInput[] | null;
    connect?: AttributeWhereUniqueInput[] | null;
    set?: AttributeWhereUniqueInput[] | null;
    disconnect?: AttributeWhereUniqueInput[] | null;
    delete?: AttributeWhereUniqueInput[] | null;
    update?: AttributeUpdateWithWhereUniqueWithoutEmailInput[] | null;
    updateMany?: AttributeUpdateManyWithWhereNestedInput[] | null;
    deleteMany?: AttributeScalarWhereInput[] | null;
    upsert?: AttributeUpsertWithWhereUniqueWithoutEmailInput[] | null;
  }
  export interface AttributeUpdateManyWithoutPhone_numberInput {
    create?: AttributeCreateWithoutPhone_numberInput[] | null;
    connect?: AttributeWhereUniqueInput[] | null;
    set?: AttributeWhereUniqueInput[] | null;
    disconnect?: AttributeWhereUniqueInput[] | null;
    delete?: AttributeWhereUniqueInput[] | null;
    update?: AttributeUpdateWithWhereUniqueWithoutPhone_numberInput[] | null;
    updateMany?: AttributeUpdateManyWithWhereNestedInput[] | null;
    deleteMany?: AttributeScalarWhereInput[] | null;
    upsert?: AttributeUpsertWithWhereUniqueWithoutPhone_numberInput[] | null;
  }
  export interface EmailUpdateManyInput {
    create?: EmailCreateInput[] | null;
    connect?: EmailWhereUniqueInput[] | null;
    set?: EmailWhereUniqueInput[] | null;
    disconnect?: EmailWhereUniqueInput[] | null;
    delete?: EmailWhereUniqueInput[] | null;
    update?: EmailUpdateWithWhereUniqueNestedInput[] | null;
    deleteMany?: EmailScalarWhereInput[] | null;
    upsert?: EmailUpsertWithWhereUniqueNestedInput[] | null;
  }
  export interface PhoneNumberUpdateManyInput {
    create?: PhoneNumberCreateInput[] | null;
    connect?: PhoneNumberWhereUniqueInput[] | null;
    set?: PhoneNumberWhereUniqueInput[] | null;
    disconnect?: PhoneNumberWhereUniqueInput[] | null;
    delete?: PhoneNumberWhereUniqueInput[] | null;
    update?: PhoneNumberUpdateWithWhereUniqueNestedInput[] | null;
    deleteMany?: PhoneNumberScalarWhereInput[] | null;
    upsert?: PhoneNumberUpsertWithWhereUniqueNestedInput[] | null;
  }
  export interface IdProofUpdateOneInput {
    create?: IdProofCreateInput | null;
    connect?: IdProofWhereUniqueInput | null;
    disconnect?: boolean | null;
    delete?: boolean | null;
    update?: IdProofUpdateDataInput | null;
    upsert?: IdProofUpsertNestedInput | null;
  }
  export interface EmailCreateWithoutAttributeInput {
    id?: string | null;
    owner: UserCreateOneInput;
  }
  export interface PhoneNumberCreateWithoutAttributeInput {
    id?: string | null;
    owner: UserCreateOneInput;
  }
  export interface AttributeCreateWithoutEmailInput {
    id?: string | null;
    attr_type: string;
    tax_id?: TaxIdCreateManyInput | null;
    phone_number?: PhoneNumberCreateManyWithoutAttributeInput | null;
  }
  export interface AttributeCreateWithoutPhone_numberInput {
    id?: string | null;
    attr_type: string;
    tax_id?: TaxIdCreateManyInput | null;
    email?: EmailCreateManyWithoutAttributeInput | null;
  }
  export interface TaxIdUpdateWithWhereUniqueNestedInput {
    where: TaxIdWhereUniqueInput;
    data: TaxIdUpdateDataInput;
  }
  export interface TaxIdScalarWhereInput {
    AND?: TaxIdScalarWhereInput[] | null;
    OR?: TaxIdScalarWhereInput[] | null;
    NOT?: TaxIdScalarWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
  }
  export interface TaxIdUpsertWithWhereUniqueNestedInput {
    where: TaxIdWhereUniqueInput;
    update: TaxIdUpdateDataInput;
    create: TaxIdCreateInput;
  }
  export interface EmailUpdateWithWhereUniqueWithoutAttributeInput {
    where: EmailWhereUniqueInput;
    data: EmailUpdateWithoutAttributeDataInput;
  }
  export interface EmailScalarWhereInput {
    AND?: EmailScalarWhereInput[] | null;
    OR?: EmailScalarWhereInput[] | null;
    NOT?: EmailScalarWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
  }
  export interface EmailUpsertWithWhereUniqueWithoutAttributeInput {
    where: EmailWhereUniqueInput;
    update: EmailUpdateWithoutAttributeDataInput;
    create: EmailCreateWithoutAttributeInput;
  }
  export interface PhoneNumberUpdateWithWhereUniqueWithoutAttributeInput {
    where: PhoneNumberWhereUniqueInput;
    data: PhoneNumberUpdateWithoutAttributeDataInput;
  }
  export interface PhoneNumberScalarWhereInput {
    AND?: PhoneNumberScalarWhereInput[] | null;
    OR?: PhoneNumberScalarWhereInput[] | null;
    NOT?: PhoneNumberScalarWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
  }
  export interface PhoneNumberUpsertWithWhereUniqueWithoutAttributeInput {
    where: PhoneNumberWhereUniqueInput;
    update: PhoneNumberUpdateWithoutAttributeDataInput;
    create: PhoneNumberCreateWithoutAttributeInput;
  }
  export interface UserUpdateDataInput {
    email?: string | null;
    name?: string | null;
    role?: AuthLevel | null;
    id_proof?: IdProofUpdateOneInput | null;
  }
  export interface UserUpsertNestedInput {
    update: UserUpdateDataInput;
    create: UserCreateInput;
  }
  export interface AttributeUpdateWithWhereUniqueWithoutEmailInput {
    where: AttributeWhereUniqueInput;
    data: AttributeUpdateWithoutEmailDataInput;
  }
  export interface AttributeUpdateManyWithWhereNestedInput {
    where: AttributeScalarWhereInput;
    data: AttributeUpdateManyDataInput;
  }
  export interface AttributeScalarWhereInput {
    AND?: AttributeScalarWhereInput[] | null;
    OR?: AttributeScalarWhereInput[] | null;
    NOT?: AttributeScalarWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    attr_type?: string | null;
    attr_type_not?: string | null;
    attr_type_in?: string[] | null;
    attr_type_not_in?: string[] | null;
    attr_type_lt?: string | null;
    attr_type_lte?: string | null;
    attr_type_gt?: string | null;
    attr_type_gte?: string | null;
    attr_type_contains?: string | null;
    attr_type_not_contains?: string | null;
    attr_type_starts_with?: string | null;
    attr_type_not_starts_with?: string | null;
    attr_type_ends_with?: string | null;
    attr_type_not_ends_with?: string | null;
  }
  export interface AttributeUpsertWithWhereUniqueWithoutEmailInput {
    where: AttributeWhereUniqueInput;
    update: AttributeUpdateWithoutEmailDataInput;
    create: AttributeCreateWithoutEmailInput;
  }
  export interface AttributeUpdateWithWhereUniqueWithoutPhone_numberInput {
    where: AttributeWhereUniqueInput;
    data: AttributeUpdateWithoutPhone_numberDataInput;
  }
  export interface AttributeUpsertWithWhereUniqueWithoutPhone_numberInput {
    where: AttributeWhereUniqueInput;
    update: AttributeUpdateWithoutPhone_numberDataInput;
    create: AttributeCreateWithoutPhone_numberInput;
  }
  export interface EmailUpdateWithWhereUniqueNestedInput {
    where: EmailWhereUniqueInput;
    data: EmailUpdateDataInput;
  }
  export interface EmailUpsertWithWhereUniqueNestedInput {
    where: EmailWhereUniqueInput;
    update: EmailUpdateDataInput;
    create: EmailCreateInput;
  }
  export interface PhoneNumberUpdateWithWhereUniqueNestedInput {
    where: PhoneNumberWhereUniqueInput;
    data: PhoneNumberUpdateDataInput;
  }
  export interface PhoneNumberUpsertWithWhereUniqueNestedInput {
    where: PhoneNumberWhereUniqueInput;
    update: PhoneNumberUpdateDataInput;
    create: PhoneNumberCreateInput;
  }
  export interface IdProofUpdateDataInput {
    tax_id?: TaxIdUpdateManyInput | null;
    email?: EmailUpdateManyInput | null;
    phone_number?: PhoneNumberUpdateManyInput | null;
  }
  export interface IdProofUpsertNestedInput {
    update: IdProofUpdateDataInput;
    create: IdProofCreateInput;
  }
  export interface TaxIdUpdateDataInput {
    owner?: UserUpdateOneRequiredInput | null;
  }
  export interface EmailUpdateWithoutAttributeDataInput {
    owner?: UserUpdateOneRequiredInput | null;
  }
  export interface PhoneNumberUpdateWithoutAttributeDataInput {
    owner?: UserUpdateOneRequiredInput | null;
  }
  export interface AttributeUpdateWithoutEmailDataInput {
    attr_type?: string | null;
    tax_id?: TaxIdUpdateManyInput | null;
    phone_number?: PhoneNumberUpdateManyWithoutAttributeInput | null;
  }
  export interface AttributeUpdateManyDataInput {
    attr_type?: string | null;
  }
  export interface AttributeUpdateWithoutPhone_numberDataInput {
    attr_type?: string | null;
    tax_id?: TaxIdUpdateManyInput | null;
    email?: EmailUpdateManyWithoutAttributeInput | null;
  }
  export interface EmailUpdateDataInput {
    owner?: UserUpdateOneRequiredInput | null;
    attribute?: AttributeUpdateManyWithoutEmailInput | null;
  }
  export interface PhoneNumberUpdateDataInput {
    owner?: UserUpdateOneRequiredInput | null;
    attribute?: AttributeUpdateManyWithoutPhone_numberInput | null;
  }

  export interface ArgsCreateAttribute {
    data: AttributeCreateInput;
  }

  export interface ArgsCreateEmail {
    data: EmailCreateInput;
  }

  export interface ArgsCreatePhoneNumber {
    data: PhoneNumberCreateInput;
  }

  export interface ArgsCreateIdProof {
    data: IdProofCreateInput;
  }

  export interface ArgsCreateTaxId {
    data: TaxIdCreateInput;
  }

  export interface ArgsCreateUser {
    data: UserCreateInput;
  }

  export interface ArgsUpdateAttribute {
    data: AttributeUpdateInput;
    where: AttributeWhereUniqueInput;
  }

  export interface ArgsUpdateEmail {
    data: EmailUpdateInput;
    where: EmailWhereUniqueInput;
  }

  export interface ArgsUpdatePhoneNumber {
    data: PhoneNumberUpdateInput;
    where: PhoneNumberWhereUniqueInput;
  }

  export interface ArgsUpdateIdProof {
    data: IdProofUpdateInput;
    where: IdProofWhereUniqueInput;
  }

  export interface ArgsUpdateTaxId {
    data: TaxIdUpdateInput;
    where: TaxIdWhereUniqueInput;
  }

  export interface ArgsUpdateUser {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }

  export interface ArgsDeleteAttribute {
    where: AttributeWhereUniqueInput;
  }

  export interface ArgsDeleteEmail {
    where: EmailWhereUniqueInput;
  }

  export interface ArgsDeletePhoneNumber {
    where: PhoneNumberWhereUniqueInput;
  }

  export interface ArgsDeleteIdProof {
    where: IdProofWhereUniqueInput;
  }

  export interface ArgsDeleteTaxId {
    where: TaxIdWhereUniqueInput;
  }

  export interface ArgsDeleteUser {
    where: UserWhereUniqueInput;
  }

  export interface ArgsUpsertAttribute {
    where: AttributeWhereUniqueInput;
    create: AttributeCreateInput;
    update: AttributeUpdateInput;
  }

  export interface ArgsUpsertEmail {
    where: EmailWhereUniqueInput;
    create: EmailCreateInput;
    update: EmailUpdateInput;
  }

  export interface ArgsUpsertPhoneNumber {
    where: PhoneNumberWhereUniqueInput;
    create: PhoneNumberCreateInput;
    update: PhoneNumberUpdateInput;
  }

  export interface ArgsUpsertIdProof {
    where: IdProofWhereUniqueInput;
    create: IdProofCreateInput;
    update: IdProofUpdateInput;
  }

  export interface ArgsUpsertTaxId {
    where: TaxIdWhereUniqueInput;
    create: TaxIdCreateInput;
    update: TaxIdUpdateInput;
  }

  export interface ArgsUpsertUser {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }

  export interface ArgsUpdateManyAttributes {
    data: AttributeUpdateManyMutationInput;
    where?: AttributeWhereInput | null;
  }

  export interface ArgsUpdateManyUsers {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput | null;
  }

  export interface ArgsDeleteManyAttributes {
    where?: AttributeWhereInput | null;
  }

  export interface ArgsDeleteManyEmails {
    where?: EmailWhereInput | null;
  }

  export interface ArgsDeleteManyPhoneNumbers {
    where?: PhoneNumberWhereInput | null;
  }

  export interface ArgsDeleteManyIdProofs {
    where?: IdProofWhereInput | null;
  }

  export interface ArgsDeleteManyTaxIds {
    where?: TaxIdWhereInput | null;
  }

  export interface ArgsDeleteManyUsers {
    where?: UserWhereInput | null;
  }

  export type CreateAttributeResolver =
    | ((
        parent: undefined,
        args: ArgsCreateAttribute,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Attribute | Promise<Attribute>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | Promise<Attribute>;
      };

  export type CreateEmailResolver =
    | ((
        parent: undefined,
        args: ArgsCreateEmail,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Email | Promise<Email>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | Promise<Email>;
      };

  export type CreatePhoneNumberResolver =
    | ((
        parent: undefined,
        args: ArgsCreatePhoneNumber,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PhoneNumber | Promise<PhoneNumber>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreatePhoneNumber,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | Promise<PhoneNumber>;
      };

  export type CreateIdProofResolver =
    | ((
        parent: undefined,
        args: ArgsCreateIdProof,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => IdProof | Promise<IdProof>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateIdProof,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | Promise<IdProof>;
      };

  export type CreateTaxIdResolver =
    | ((
        parent: undefined,
        args: ArgsCreateTaxId,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TaxId | Promise<TaxId>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateTaxId,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | Promise<TaxId>;
      };

  export type CreateUserResolver =
    | ((
        parent: undefined,
        args: ArgsCreateUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type UpdateAttributeResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateAttribute,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Attribute | null | Promise<Attribute | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | null | Promise<Attribute | null>;
      };

  export type UpdateEmailResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateEmail,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Email | null | Promise<Email | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | null | Promise<Email | null>;
      };

  export type UpdatePhoneNumberResolver =
    | ((
        parent: undefined,
        args: ArgsUpdatePhoneNumber,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PhoneNumber | null | Promise<PhoneNumber | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdatePhoneNumber,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | null | Promise<PhoneNumber | null>;
      };

  export type UpdateIdProofResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateIdProof,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => IdProof | null | Promise<IdProof | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateIdProof,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | null | Promise<IdProof | null>;
      };

  export type UpdateTaxIdResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateTaxId,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TaxId | null | Promise<TaxId | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateTaxId,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | null | Promise<TaxId | null>;
      };

  export type UpdateUserResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type DeleteAttributeResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteAttribute,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Attribute | null | Promise<Attribute | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | null | Promise<Attribute | null>;
      };

  export type DeleteEmailResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteEmail,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Email | null | Promise<Email | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | null | Promise<Email | null>;
      };

  export type DeletePhoneNumberResolver =
    | ((
        parent: undefined,
        args: ArgsDeletePhoneNumber,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PhoneNumber | null | Promise<PhoneNumber | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeletePhoneNumber,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | null | Promise<PhoneNumber | null>;
      };

  export type DeleteIdProofResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteIdProof,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => IdProof | null | Promise<IdProof | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteIdProof,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | null | Promise<IdProof | null>;
      };

  export type DeleteTaxIdResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteTaxId,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TaxId | null | Promise<TaxId | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteTaxId,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | null | Promise<TaxId | null>;
      };

  export type DeleteUserResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type UpsertAttributeResolver =
    | ((
        parent: undefined,
        args: ArgsUpsertAttribute,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Attribute | Promise<Attribute>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpsertAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | Promise<Attribute>;
      };

  export type UpsertEmailResolver =
    | ((
        parent: undefined,
        args: ArgsUpsertEmail,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Email | Promise<Email>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpsertEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | Promise<Email>;
      };

  export type UpsertPhoneNumberResolver =
    | ((
        parent: undefined,
        args: ArgsUpsertPhoneNumber,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PhoneNumber | Promise<PhoneNumber>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpsertPhoneNumber,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | Promise<PhoneNumber>;
      };

  export type UpsertIdProofResolver =
    | ((
        parent: undefined,
        args: ArgsUpsertIdProof,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => IdProof | Promise<IdProof>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpsertIdProof,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | Promise<IdProof>;
      };

  export type UpsertTaxIdResolver =
    | ((
        parent: undefined,
        args: ArgsUpsertTaxId,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TaxId | Promise<TaxId>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpsertTaxId,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | Promise<TaxId>;
      };

  export type UpsertUserResolver =
    | ((
        parent: undefined,
        args: ArgsUpsertUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpsertUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type UpdateManyAttributesResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateManyAttributes,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => BatchPayload | Promise<BatchPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateManyAttributes,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>;
      };

  export type UpdateManyUsersResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateManyUsers,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => BatchPayload | Promise<BatchPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateManyUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>;
      };

  export type DeleteManyAttributesResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteManyAttributes,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => BatchPayload | Promise<BatchPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteManyAttributes,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>;
      };

  export type DeleteManyEmailsResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteManyEmails,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => BatchPayload | Promise<BatchPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteManyEmails,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>;
      };

  export type DeleteManyPhoneNumbersResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteManyPhoneNumbers,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => BatchPayload | Promise<BatchPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteManyPhoneNumbers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>;
      };

  export type DeleteManyIdProofsResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteManyIdProofs,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => BatchPayload | Promise<BatchPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteManyIdProofs,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>;
      };

  export type DeleteManyTaxIdsResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteManyTaxIds,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => BatchPayload | Promise<BatchPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteManyTaxIds,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>;
      };

  export type DeleteManyUsersResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteManyUsers,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => BatchPayload | Promise<BatchPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteManyUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>;
      };

  export interface Type {
    createAttribute:
      | ((
          parent: undefined,
          args: ArgsCreateAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | Promise<Attribute>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateAttribute,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Attribute | Promise<Attribute>;
        };

    createEmail:
      | ((
          parent: undefined,
          args: ArgsCreateEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | Promise<Email>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateEmail,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Email | Promise<Email>;
        };

    createPhoneNumber:
      | ((
          parent: undefined,
          args: ArgsCreatePhoneNumber,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | Promise<PhoneNumber>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreatePhoneNumber,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PhoneNumber | Promise<PhoneNumber>;
        };

    createIdProof:
      | ((
          parent: undefined,
          args: ArgsCreateIdProof,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | Promise<IdProof>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateIdProof,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => IdProof | Promise<IdProof>;
        };

    createTaxId:
      | ((
          parent: undefined,
          args: ArgsCreateTaxId,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | Promise<TaxId>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateTaxId,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => TaxId | Promise<TaxId>;
        };

    createUser:
      | ((
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    updateAttribute:
      | ((
          parent: undefined,
          args: ArgsUpdateAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | null | Promise<Attribute | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateAttribute,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Attribute | null | Promise<Attribute | null>;
        };

    updateEmail:
      | ((
          parent: undefined,
          args: ArgsUpdateEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | null | Promise<Email | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateEmail,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Email | null | Promise<Email | null>;
        };

    updatePhoneNumber:
      | ((
          parent: undefined,
          args: ArgsUpdatePhoneNumber,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | null | Promise<PhoneNumber | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdatePhoneNumber,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PhoneNumber | null | Promise<PhoneNumber | null>;
        };

    updateIdProof:
      | ((
          parent: undefined,
          args: ArgsUpdateIdProof,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | null | Promise<IdProof | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateIdProof,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => IdProof | null | Promise<IdProof | null>;
        };

    updateTaxId:
      | ((
          parent: undefined,
          args: ArgsUpdateTaxId,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | null | Promise<TaxId | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateTaxId,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => TaxId | null | Promise<TaxId | null>;
        };

    updateUser:
      | ((
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    deleteAttribute:
      | ((
          parent: undefined,
          args: ArgsDeleteAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | null | Promise<Attribute | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteAttribute,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Attribute | null | Promise<Attribute | null>;
        };

    deleteEmail:
      | ((
          parent: undefined,
          args: ArgsDeleteEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | null | Promise<Email | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteEmail,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Email | null | Promise<Email | null>;
        };

    deletePhoneNumber:
      | ((
          parent: undefined,
          args: ArgsDeletePhoneNumber,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | null | Promise<PhoneNumber | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeletePhoneNumber,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PhoneNumber | null | Promise<PhoneNumber | null>;
        };

    deleteIdProof:
      | ((
          parent: undefined,
          args: ArgsDeleteIdProof,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | null | Promise<IdProof | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteIdProof,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => IdProof | null | Promise<IdProof | null>;
        };

    deleteTaxId:
      | ((
          parent: undefined,
          args: ArgsDeleteTaxId,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | null | Promise<TaxId | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteTaxId,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => TaxId | null | Promise<TaxId | null>;
        };

    deleteUser:
      | ((
          parent: undefined,
          args: ArgsDeleteUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    upsertAttribute:
      | ((
          parent: undefined,
          args: ArgsUpsertAttribute,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | Promise<Attribute>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpsertAttribute,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Attribute | Promise<Attribute>;
        };

    upsertEmail:
      | ((
          parent: undefined,
          args: ArgsUpsertEmail,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | Promise<Email>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpsertEmail,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Email | Promise<Email>;
        };

    upsertPhoneNumber:
      | ((
          parent: undefined,
          args: ArgsUpsertPhoneNumber,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | Promise<PhoneNumber>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpsertPhoneNumber,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PhoneNumber | Promise<PhoneNumber>;
        };

    upsertIdProof:
      | ((
          parent: undefined,
          args: ArgsUpsertIdProof,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | Promise<IdProof>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpsertIdProof,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => IdProof | Promise<IdProof>;
        };

    upsertTaxId:
      | ((
          parent: undefined,
          args: ArgsUpsertTaxId,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | Promise<TaxId>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpsertTaxId,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => TaxId | Promise<TaxId>;
        };

    upsertUser:
      | ((
          parent: undefined,
          args: ArgsUpsertUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpsertUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    updateManyAttributes:
      | ((
          parent: undefined,
          args: ArgsUpdateManyAttributes,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateManyAttributes,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => BatchPayload | Promise<BatchPayload>;
        };

    updateManyUsers:
      | ((
          parent: undefined,
          args: ArgsUpdateManyUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateManyUsers,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => BatchPayload | Promise<BatchPayload>;
        };

    deleteManyAttributes:
      | ((
          parent: undefined,
          args: ArgsDeleteManyAttributes,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteManyAttributes,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => BatchPayload | Promise<BatchPayload>;
        };

    deleteManyEmails:
      | ((
          parent: undefined,
          args: ArgsDeleteManyEmails,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteManyEmails,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => BatchPayload | Promise<BatchPayload>;
        };

    deleteManyPhoneNumbers:
      | ((
          parent: undefined,
          args: ArgsDeleteManyPhoneNumbers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteManyPhoneNumbers,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => BatchPayload | Promise<BatchPayload>;
        };

    deleteManyIdProofs:
      | ((
          parent: undefined,
          args: ArgsDeleteManyIdProofs,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteManyIdProofs,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => BatchPayload | Promise<BatchPayload>;
        };

    deleteManyTaxIds:
      | ((
          parent: undefined,
          args: ArgsDeleteManyTaxIds,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteManyTaxIds,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => BatchPayload | Promise<BatchPayload>;
        };

    deleteManyUsers:
      | ((
          parent: undefined,
          args: ArgsDeleteManyUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteManyUsers,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => BatchPayload | Promise<BatchPayload>;
        };
  }
}

export namespace BatchPayloadResolvers {
  export const defaultResolvers = {
    count: (parent: BatchPayload) => parent.count
  };

  export type CountResolver =
    | ((
        parent: BatchPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: BatchPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    count:
      | ((
          parent: BatchPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: BatchPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export interface AttributeSubscriptionWhereInput {
    AND?: AttributeSubscriptionWhereInput[] | null;
    OR?: AttributeSubscriptionWhereInput[] | null;
    NOT?: AttributeSubscriptionWhereInput[] | null;
    mutation_in?: MutationType[] | null;
    updatedFields_contains?: string | null;
    updatedFields_contains_every?: string[] | null;
    updatedFields_contains_some?: string[] | null;
    node?: AttributeWhereInput | null;
  }
  export interface EmailSubscriptionWhereInput {
    AND?: EmailSubscriptionWhereInput[] | null;
    OR?: EmailSubscriptionWhereInput[] | null;
    NOT?: EmailSubscriptionWhereInput[] | null;
    mutation_in?: MutationType[] | null;
    updatedFields_contains?: string | null;
    updatedFields_contains_every?: string[] | null;
    updatedFields_contains_some?: string[] | null;
    node?: EmailWhereInput | null;
  }
  export interface PhoneNumberSubscriptionWhereInput {
    AND?: PhoneNumberSubscriptionWhereInput[] | null;
    OR?: PhoneNumberSubscriptionWhereInput[] | null;
    NOT?: PhoneNumberSubscriptionWhereInput[] | null;
    mutation_in?: MutationType[] | null;
    updatedFields_contains?: string | null;
    updatedFields_contains_every?: string[] | null;
    updatedFields_contains_some?: string[] | null;
    node?: PhoneNumberWhereInput | null;
  }
  export interface IdProofSubscriptionWhereInput {
    AND?: IdProofSubscriptionWhereInput[] | null;
    OR?: IdProofSubscriptionWhereInput[] | null;
    NOT?: IdProofSubscriptionWhereInput[] | null;
    mutation_in?: MutationType[] | null;
    updatedFields_contains?: string | null;
    updatedFields_contains_every?: string[] | null;
    updatedFields_contains_some?: string[] | null;
    node?: IdProofWhereInput | null;
  }
  export interface TaxIdSubscriptionWhereInput {
    AND?: TaxIdSubscriptionWhereInput[] | null;
    OR?: TaxIdSubscriptionWhereInput[] | null;
    NOT?: TaxIdSubscriptionWhereInput[] | null;
    mutation_in?: MutationType[] | null;
    updatedFields_contains?: string | null;
    updatedFields_contains_every?: string[] | null;
    updatedFields_contains_some?: string[] | null;
    node?: TaxIdWhereInput | null;
  }
  export interface UserSubscriptionWhereInput {
    AND?: UserSubscriptionWhereInput[] | null;
    OR?: UserSubscriptionWhereInput[] | null;
    NOT?: UserSubscriptionWhereInput[] | null;
    mutation_in?: MutationType[] | null;
    updatedFields_contains?: string | null;
    updatedFields_contains_every?: string[] | null;
    updatedFields_contains_some?: string[] | null;
    node?: UserWhereInput | null;
  }
  export interface AttributeWhereInput {
    AND?: AttributeWhereInput[] | null;
    OR?: AttributeWhereInput[] | null;
    NOT?: AttributeWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    attr_type?: string | null;
    attr_type_not?: string | null;
    attr_type_in?: string[] | null;
    attr_type_not_in?: string[] | null;
    attr_type_lt?: string | null;
    attr_type_lte?: string | null;
    attr_type_gt?: string | null;
    attr_type_gte?: string | null;
    attr_type_contains?: string | null;
    attr_type_not_contains?: string | null;
    attr_type_starts_with?: string | null;
    attr_type_not_starts_with?: string | null;
    attr_type_ends_with?: string | null;
    attr_type_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }
  export interface EmailWhereInput {
    AND?: EmailWhereInput[] | null;
    OR?: EmailWhereInput[] | null;
    NOT?: EmailWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface PhoneNumberWhereInput {
    AND?: PhoneNumberWhereInput[] | null;
    OR?: PhoneNumberWhereInput[] | null;
    NOT?: PhoneNumberWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
    attribute_every?: AttributeWhereInput | null;
    attribute_some?: AttributeWhereInput | null;
    attribute_none?: AttributeWhereInput | null;
  }
  export interface IdProofWhereInput {
    AND?: IdProofWhereInput[] | null;
    OR?: IdProofWhereInput[] | null;
    NOT?: IdProofWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    tax_id_every?: TaxIdWhereInput | null;
    tax_id_some?: TaxIdWhereInput | null;
    tax_id_none?: TaxIdWhereInput | null;
    email_every?: EmailWhereInput | null;
    email_some?: EmailWhereInput | null;
    email_none?: EmailWhereInput | null;
    phone_number_every?: PhoneNumberWhereInput | null;
    phone_number_some?: PhoneNumberWhereInput | null;
    phone_number_none?: PhoneNumberWhereInput | null;
  }
  export interface TaxIdWhereInput {
    AND?: TaxIdWhereInput[] | null;
    OR?: TaxIdWhereInput[] | null;
    NOT?: TaxIdWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    owner?: UserWhereInput | null;
  }
  export interface UserWhereInput {
    AND?: UserWhereInput[] | null;
    OR?: UserWhereInput[] | null;
    NOT?: UserWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    createdAt?: string | null;
    createdAt_not?: string | null;
    createdAt_in?: string[] | null;
    createdAt_not_in?: string[] | null;
    createdAt_lt?: string | null;
    createdAt_lte?: string | null;
    createdAt_gt?: string | null;
    createdAt_gte?: string | null;
    updatedAt?: string | null;
    updatedAt_not?: string | null;
    updatedAt_in?: string[] | null;
    updatedAt_not_in?: string[] | null;
    updatedAt_lt?: string | null;
    updatedAt_lte?: string | null;
    updatedAt_gt?: string | null;
    updatedAt_gte?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    name?: string | null;
    name_not?: string | null;
    name_in?: string[] | null;
    name_not_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_contains?: string | null;
    name_not_contains?: string | null;
    name_starts_with?: string | null;
    name_not_starts_with?: string | null;
    name_ends_with?: string | null;
    name_not_ends_with?: string | null;
    role?: AuthLevel | null;
    role_not?: AuthLevel | null;
    role_in?: AuthLevel[] | null;
    role_not_in?: AuthLevel[] | null;
    id_proof?: IdProofWhereInput | null;
  }

  export interface ArgsAttribute {
    where?: AttributeSubscriptionWhereInput | null;
  }

  export interface ArgsEmail {
    where?: EmailSubscriptionWhereInput | null;
  }

  export interface ArgsPhoneNumber {
    where?: PhoneNumberSubscriptionWhereInput | null;
  }

  export interface ArgsIdProof {
    where?: IdProofSubscriptionWhereInput | null;
  }

  export interface ArgsTaxId {
    where?: TaxIdSubscriptionWhereInput | null;
  }

  export interface ArgsUser {
    where?: UserSubscriptionWhereInput | null;
  }

  export type AttributeResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsAttribute,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<AttributeSubscriptionPayload | null>
      | Promise<AsyncIterator<AttributeSubscriptionPayload | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsAttribute,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AttributeSubscriptionPayload
      | null
      | Promise<AttributeSubscriptionPayload | null>;
  };

  export type EmailResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsEmail,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<EmailSubscriptionPayload | null>
      | Promise<AsyncIterator<EmailSubscriptionPayload | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsEmail,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | EmailSubscriptionPayload
      | null
      | Promise<EmailSubscriptionPayload | null>;
  };

  export type PhoneNumberResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsPhoneNumber,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<PhoneNumberSubscriptionPayload | null>
      | Promise<AsyncIterator<PhoneNumberSubscriptionPayload | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsPhoneNumber,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | PhoneNumberSubscriptionPayload
      | null
      | Promise<PhoneNumberSubscriptionPayload | null>;
  };

  export type IdProofResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsIdProof,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<IdProofSubscriptionPayload | null>
      | Promise<AsyncIterator<IdProofSubscriptionPayload | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsIdProof,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | IdProofSubscriptionPayload
      | null
      | Promise<IdProofSubscriptionPayload | null>;
  };

  export type TaxIdResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsTaxId,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<TaxIdSubscriptionPayload | null>
      | Promise<AsyncIterator<TaxIdSubscriptionPayload | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsTaxId,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | TaxIdSubscriptionPayload
      | null
      | Promise<TaxIdSubscriptionPayload | null>;
  };

  export type UserResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<UserSubscriptionPayload | null>
      | Promise<AsyncIterator<UserSubscriptionPayload | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | UserSubscriptionPayload
      | null
      | Promise<UserSubscriptionPayload | null>;
  };

  export interface Type {
    attribute: {
      subscribe: (
        parent: undefined,
        args: ArgsAttribute,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<AttributeSubscriptionPayload | null>
        | Promise<AsyncIterator<AttributeSubscriptionPayload | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsAttribute,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AttributeSubscriptionPayload
        | null
        | Promise<AttributeSubscriptionPayload | null>;
    };

    email: {
      subscribe: (
        parent: undefined,
        args: ArgsEmail,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<EmailSubscriptionPayload | null>
        | Promise<AsyncIterator<EmailSubscriptionPayload | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsEmail,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | EmailSubscriptionPayload
        | null
        | Promise<EmailSubscriptionPayload | null>;
    };

    phoneNumber: {
      subscribe: (
        parent: undefined,
        args: ArgsPhoneNumber,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<PhoneNumberSubscriptionPayload | null>
        | Promise<AsyncIterator<PhoneNumberSubscriptionPayload | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsPhoneNumber,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | PhoneNumberSubscriptionPayload
        | null
        | Promise<PhoneNumberSubscriptionPayload | null>;
    };

    idProof: {
      subscribe: (
        parent: undefined,
        args: ArgsIdProof,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<IdProofSubscriptionPayload | null>
        | Promise<AsyncIterator<IdProofSubscriptionPayload | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsIdProof,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | IdProofSubscriptionPayload
        | null
        | Promise<IdProofSubscriptionPayload | null>;
    };

    taxId: {
      subscribe: (
        parent: undefined,
        args: ArgsTaxId,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<TaxIdSubscriptionPayload | null>
        | Promise<AsyncIterator<TaxIdSubscriptionPayload | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsTaxId,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | TaxIdSubscriptionPayload
        | null
        | Promise<TaxIdSubscriptionPayload | null>;
    };

    user: {
      subscribe: (
        parent: undefined,
        args: ArgsUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<UserSubscriptionPayload | null>
        | Promise<AsyncIterator<UserSubscriptionPayload | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | UserSubscriptionPayload
        | null
        | Promise<UserSubscriptionPayload | null>;
    };
  }
}

export namespace AttributeSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: AttributeSubscriptionPayload) => parent.mutation,
    node: (parent: AttributeSubscriptionPayload) => parent.node,
    updatedFields: (parent: AttributeSubscriptionPayload) =>
      parent.updatedFields,
    previousValues: (parent: AttributeSubscriptionPayload) =>
      parent.previousValues
  };

  export type MutationResolver =
    | ((
        parent: AttributeSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => MutationType | Promise<MutationType>)
    | {
        fragment: string;
        resolve: (
          parent: AttributeSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>;
      };

  export type NodeResolver =
    | ((
        parent: AttributeSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Attribute | null | Promise<Attribute | null>)
    | {
        fragment: string;
        resolve: (
          parent: AttributeSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | null | Promise<Attribute | null>;
      };

  export type UpdatedFieldsResolver =
    | ((
        parent: AttributeSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string[] | null | Promise<string[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: AttributeSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>;
      };

  export type PreviousValuesResolver =
    | ((
        parent: AttributeSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AttributePreviousValues
        | null
        | Promise<AttributePreviousValues | null>
      )
    | {
        fragment: string;
        resolve: (
          parent: AttributeSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AttributePreviousValues
          | null
          | Promise<AttributePreviousValues | null>;
      };

  export interface Type {
    mutation:
      | ((
          parent: AttributeSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>)
      | {
          fragment: string;
          resolve: (
            parent: AttributeSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => MutationType | Promise<MutationType>;
        };

    node:
      | ((
          parent: AttributeSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Attribute | null | Promise<Attribute | null>)
      | {
          fragment: string;
          resolve: (
            parent: AttributeSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Attribute | null | Promise<Attribute | null>;
        };

    updatedFields:
      | ((
          parent: AttributeSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: AttributeSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string[] | null | Promise<string[] | null>;
        };

    previousValues:
      | ((
          parent: AttributeSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | AttributePreviousValues
          | null
          | Promise<AttributePreviousValues | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: AttributeSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | AttributePreviousValues
            | null
            | Promise<AttributePreviousValues | null>;
        };
  }
}

export namespace AttributePreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: AttributePreviousValues) => parent.id,
    attr_type: (parent: AttributePreviousValues) => parent.attr_type
  };

  export type IdResolver =
    | ((
        parent: AttributePreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: AttributePreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type Attr_typeResolver =
    | ((
        parent: AttributePreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: AttributePreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: AttributePreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: AttributePreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    attr_type:
      | ((
          parent: AttributePreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: AttributePreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace EmailSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: EmailSubscriptionPayload) => parent.mutation,
    node: (parent: EmailSubscriptionPayload) => parent.node,
    updatedFields: (parent: EmailSubscriptionPayload) => parent.updatedFields,
    previousValues: (parent: EmailSubscriptionPayload) => parent.previousValues
  };

  export type MutationResolver =
    | ((
        parent: EmailSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => MutationType | Promise<MutationType>)
    | {
        fragment: string;
        resolve: (
          parent: EmailSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>;
      };

  export type NodeResolver =
    | ((
        parent: EmailSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Email | null | Promise<Email | null>)
    | {
        fragment: string;
        resolve: (
          parent: EmailSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | null | Promise<Email | null>;
      };

  export type UpdatedFieldsResolver =
    | ((
        parent: EmailSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string[] | null | Promise<string[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: EmailSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>;
      };

  export type PreviousValuesResolver =
    | ((
        parent: EmailSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => EmailPreviousValues | null | Promise<EmailPreviousValues | null>)
    | {
        fragment: string;
        resolve: (
          parent: EmailSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => EmailPreviousValues | null | Promise<EmailPreviousValues | null>;
      };

  export interface Type {
    mutation:
      | ((
          parent: EmailSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>)
      | {
          fragment: string;
          resolve: (
            parent: EmailSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => MutationType | Promise<MutationType>;
        };

    node:
      | ((
          parent: EmailSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Email | null | Promise<Email | null>)
      | {
          fragment: string;
          resolve: (
            parent: EmailSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Email | null | Promise<Email | null>;
        };

    updatedFields:
      | ((
          parent: EmailSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: EmailSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string[] | null | Promise<string[] | null>;
        };

    previousValues:
      | ((
          parent: EmailSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => EmailPreviousValues | null | Promise<EmailPreviousValues | null>)
      | {
          fragment: string;
          resolve: (
            parent: EmailSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => EmailPreviousValues | null | Promise<EmailPreviousValues | null>;
        };
  }
}

export namespace EmailPreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: EmailPreviousValues) => parent.id,
    createdAt: (parent: EmailPreviousValues) => parent.createdAt,
    updatedAt: (parent: EmailPreviousValues) => parent.updatedAt
  };

  export type IdResolver =
    | ((
        parent: EmailPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: EmailPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: EmailPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: EmailPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: EmailPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: EmailPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: EmailPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: EmailPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: EmailPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: EmailPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: EmailPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: EmailPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace PhoneNumberSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: PhoneNumberSubscriptionPayload) => parent.mutation,
    node: (parent: PhoneNumberSubscriptionPayload) => parent.node,
    updatedFields: (parent: PhoneNumberSubscriptionPayload) =>
      parent.updatedFields,
    previousValues: (parent: PhoneNumberSubscriptionPayload) =>
      parent.previousValues
  };

  export type MutationResolver =
    | ((
        parent: PhoneNumberSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => MutationType | Promise<MutationType>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>;
      };

  export type NodeResolver =
    | ((
        parent: PhoneNumberSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PhoneNumber | null | Promise<PhoneNumber | null>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | null | Promise<PhoneNumber | null>;
      };

  export type UpdatedFieldsResolver =
    | ((
        parent: PhoneNumberSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string[] | null | Promise<string[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>;
      };

  export type PreviousValuesResolver =
    | ((
        parent: PhoneNumberSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | PhoneNumberPreviousValues
        | null
        | Promise<PhoneNumberPreviousValues | null>
      )
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | PhoneNumberPreviousValues
          | null
          | Promise<PhoneNumberPreviousValues | null>;
      };

  export interface Type {
    mutation:
      | ((
          parent: PhoneNumberSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => MutationType | Promise<MutationType>;
        };

    node:
      | ((
          parent: PhoneNumberSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PhoneNumber | null | Promise<PhoneNumber | null>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PhoneNumber | null | Promise<PhoneNumber | null>;
        };

    updatedFields:
      | ((
          parent: PhoneNumberSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string[] | null | Promise<string[] | null>;
        };

    previousValues:
      | ((
          parent: PhoneNumberSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | PhoneNumberPreviousValues
          | null
          | Promise<PhoneNumberPreviousValues | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | PhoneNumberPreviousValues
            | null
            | Promise<PhoneNumberPreviousValues | null>;
        };
  }
}

export namespace PhoneNumberPreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: PhoneNumberPreviousValues) => parent.id,
    createdAt: (parent: PhoneNumberPreviousValues) => parent.createdAt,
    updatedAt: (parent: PhoneNumberPreviousValues) => parent.updatedAt
  };

  export type IdResolver =
    | ((
        parent: PhoneNumberPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: PhoneNumberPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: PhoneNumberPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: PhoneNumberPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: PhoneNumberPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: PhoneNumberPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: PhoneNumberPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: PhoneNumberPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace IdProofSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: IdProofSubscriptionPayload) => parent.mutation,
    node: (parent: IdProofSubscriptionPayload) => parent.node,
    updatedFields: (parent: IdProofSubscriptionPayload) => parent.updatedFields,
    previousValues: (parent: IdProofSubscriptionPayload) =>
      parent.previousValues
  };

  export type MutationResolver =
    | ((
        parent: IdProofSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => MutationType | Promise<MutationType>)
    | {
        fragment: string;
        resolve: (
          parent: IdProofSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>;
      };

  export type NodeResolver =
    | ((
        parent: IdProofSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => IdProof | null | Promise<IdProof | null>)
    | {
        fragment: string;
        resolve: (
          parent: IdProofSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | null | Promise<IdProof | null>;
      };

  export type UpdatedFieldsResolver =
    | ((
        parent: IdProofSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string[] | null | Promise<string[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: IdProofSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>;
      };

  export type PreviousValuesResolver =
    | ((
        parent: IdProofSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => IdProofPreviousValues | null | Promise<IdProofPreviousValues | null>)
    | {
        fragment: string;
        resolve: (
          parent: IdProofSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | IdProofPreviousValues
          | null
          | Promise<IdProofPreviousValues | null>;
      };

  export interface Type {
    mutation:
      | ((
          parent: IdProofSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>)
      | {
          fragment: string;
          resolve: (
            parent: IdProofSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => MutationType | Promise<MutationType>;
        };

    node:
      | ((
          parent: IdProofSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => IdProof | null | Promise<IdProof | null>)
      | {
          fragment: string;
          resolve: (
            parent: IdProofSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => IdProof | null | Promise<IdProof | null>;
        };

    updatedFields:
      | ((
          parent: IdProofSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: IdProofSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string[] | null | Promise<string[] | null>;
        };

    previousValues:
      | ((
          parent: IdProofSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) =>
          | IdProofPreviousValues
          | null
          | Promise<IdProofPreviousValues | null>
        )
      | {
          fragment: string;
          resolve: (
            parent: IdProofSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) =>
            | IdProofPreviousValues
            | null
            | Promise<IdProofPreviousValues | null>;
        };
  }
}

export namespace IdProofPreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: IdProofPreviousValues) => parent.id
  };

  export type IdResolver =
    | ((
        parent: IdProofPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: IdProofPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: IdProofPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: IdProofPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace TaxIdSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: TaxIdSubscriptionPayload) => parent.mutation,
    node: (parent: TaxIdSubscriptionPayload) => parent.node,
    updatedFields: (parent: TaxIdSubscriptionPayload) => parent.updatedFields,
    previousValues: (parent: TaxIdSubscriptionPayload) => parent.previousValues
  };

  export type MutationResolver =
    | ((
        parent: TaxIdSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => MutationType | Promise<MutationType>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>;
      };

  export type NodeResolver =
    | ((
        parent: TaxIdSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TaxId | null | Promise<TaxId | null>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | null | Promise<TaxId | null>;
      };

  export type UpdatedFieldsResolver =
    | ((
        parent: TaxIdSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string[] | null | Promise<string[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>;
      };

  export type PreviousValuesResolver =
    | ((
        parent: TaxIdSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => TaxIdPreviousValues | null | Promise<TaxIdPreviousValues | null>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxIdPreviousValues | null | Promise<TaxIdPreviousValues | null>;
      };

  export interface Type {
    mutation:
      | ((
          parent: TaxIdSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => MutationType | Promise<MutationType>;
        };

    node:
      | ((
          parent: TaxIdSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxId | null | Promise<TaxId | null>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => TaxId | null | Promise<TaxId | null>;
        };

    updatedFields:
      | ((
          parent: TaxIdSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string[] | null | Promise<string[] | null>;
        };

    previousValues:
      | ((
          parent: TaxIdSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => TaxIdPreviousValues | null | Promise<TaxIdPreviousValues | null>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => TaxIdPreviousValues | null | Promise<TaxIdPreviousValues | null>;
        };
  }
}

export namespace TaxIdPreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: TaxIdPreviousValues) => parent.id,
    createdAt: (parent: TaxIdPreviousValues) => parent.createdAt,
    updatedAt: (parent: TaxIdPreviousValues) => parent.updatedAt
  };

  export type IdResolver =
    | ((
        parent: TaxIdPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: TaxIdPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: TaxIdPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: TaxIdPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: TaxIdPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: TaxIdPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: TaxIdPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: TaxIdPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace UserSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: UserSubscriptionPayload) => parent.mutation,
    node: (parent: UserSubscriptionPayload) => parent.node,
    updatedFields: (parent: UserSubscriptionPayload) => parent.updatedFields,
    previousValues: (parent: UserSubscriptionPayload) => parent.previousValues
  };

  export type MutationResolver =
    | ((
        parent: UserSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => MutationType | Promise<MutationType>)
    | {
        fragment: string;
        resolve: (
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>;
      };

  export type NodeResolver =
    | ((
        parent: UserSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type UpdatedFieldsResolver =
    | ((
        parent: UserSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string[] | null | Promise<string[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>;
      };

  export type PreviousValuesResolver =
    | ((
        parent: UserSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UserPreviousValues | null | Promise<UserPreviousValues | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserPreviousValues | null | Promise<UserPreviousValues | null>;
      };

  export interface Type {
    mutation:
      | ((
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>)
      | {
          fragment: string;
          resolve: (
            parent: UserSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => MutationType | Promise<MutationType>;
        };

    node:
      | ((
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    updatedFields:
      | ((
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string[] | null | Promise<string[] | null>;
        };

    previousValues:
      | ((
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserPreviousValues | null | Promise<UserPreviousValues | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UserPreviousValues | null | Promise<UserPreviousValues | null>;
        };
  }
}

export namespace UserPreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: UserPreviousValues) => parent.id,
    createdAt: (parent: UserPreviousValues) => parent.createdAt,
    updatedAt: (parent: UserPreviousValues) => parent.updatedAt,
    email: (parent: UserPreviousValues) => parent.email,
    name: (parent: UserPreviousValues) =>
      parent.name === undefined ? null : parent.name,
    role: (parent: UserPreviousValues) =>
      parent.role === undefined ? null : parent.role
  };

  export type IdResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type RoleResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthLevel | null | Promise<AuthLevel | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthLevel | null | Promise<AuthLevel | null>;
      };

  export interface Type {
    id:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    role:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthLevel | null | Promise<AuthLevel | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthLevel | null | Promise<AuthLevel | null>;
        };
  }
}

export namespace NodeResolvers {
  export interface Type {
    __resolveType: (
      value: Attribute | TaxId | User | IdProof | Email | PhoneNumber,
      context: Context,
      info: GraphQLResolveInfo
    ) =>
      | "Attribute"
      | "TaxId"
      | "User"
      | "IdProof"
      | "Email"
      | "PhoneNumber"
      | Promise<
          "Attribute" | "TaxId" | "User" | "IdProof" | "Email" | "PhoneNumber"
        >;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Attribute: AttributeResolvers.Type;
  TaxId: TaxIdResolvers.Type;
  User: UserResolvers.Type;
  IdProof: IdProofResolvers.Type;
  Email: EmailResolvers.Type;
  PhoneNumber: PhoneNumberResolvers.Type;
  AttributeConnection: AttributeConnectionResolvers.Type;
  PageInfo: PageInfoResolvers.Type;
  AttributeEdge: AttributeEdgeResolvers.Type;
  AggregateAttribute: AggregateAttributeResolvers.Type;
  EmailConnection: EmailConnectionResolvers.Type;
  EmailEdge: EmailEdgeResolvers.Type;
  AggregateEmail: AggregateEmailResolvers.Type;
  PhoneNumberConnection: PhoneNumberConnectionResolvers.Type;
  PhoneNumberEdge: PhoneNumberEdgeResolvers.Type;
  AggregatePhoneNumber: AggregatePhoneNumberResolvers.Type;
  IdProofConnection: IdProofConnectionResolvers.Type;
  IdProofEdge: IdProofEdgeResolvers.Type;
  AggregateIdProof: AggregateIdProofResolvers.Type;
  TaxIdConnection: TaxIdConnectionResolvers.Type;
  TaxIdEdge: TaxIdEdgeResolvers.Type;
  AggregateTaxId: AggregateTaxIdResolvers.Type;
  UserConnection: UserConnectionResolvers.Type;
  UserEdge: UserEdgeResolvers.Type;
  AggregateUser: AggregateUserResolvers.Type;
  Mutation: MutationResolvers.Type;
  BatchPayload: BatchPayloadResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
  AttributeSubscriptionPayload: AttributeSubscriptionPayloadResolvers.Type;
  AttributePreviousValues: AttributePreviousValuesResolvers.Type;
  EmailSubscriptionPayload: EmailSubscriptionPayloadResolvers.Type;
  EmailPreviousValues: EmailPreviousValuesResolvers.Type;
  PhoneNumberSubscriptionPayload: PhoneNumberSubscriptionPayloadResolvers.Type;
  PhoneNumberPreviousValues: PhoneNumberPreviousValuesResolvers.Type;
  IdProofSubscriptionPayload: IdProofSubscriptionPayloadResolvers.Type;
  IdProofPreviousValues: IdProofPreviousValuesResolvers.Type;
  TaxIdSubscriptionPayload: TaxIdSubscriptionPayloadResolvers.Type;
  TaxIdPreviousValues: TaxIdPreviousValuesResolvers.Type;
  UserSubscriptionPayload: UserSubscriptionPayloadResolvers.Type;
  UserPreviousValues: UserPreviousValuesResolvers.Type;
  Node?: NodeResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
