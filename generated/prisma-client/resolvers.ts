// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo, GraphQLIsTypeOfFn } from "graphql";
import {
  User,
  UserConnection,
  PageInfo,
  UserEdge,
  AggregateUser,
  BatchPayload,
  UserSubscriptionPayload,
  UserPreviousValues
} from ".";
type Context = any;

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "birthDate_ASC"
  | "birthDate_DESC";
export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface UserWhereInput {
    AND?: UserWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    phoneNumber?: string | null;
    phoneNumber_not?: string | null;
    phoneNumber_in?: string[] | null;
    phoneNumber_not_in?: string[] | null;
    phoneNumber_lt?: string | null;
    phoneNumber_lte?: string | null;
    phoneNumber_gt?: string | null;
    phoneNumber_gte?: string | null;
    phoneNumber_contains?: string | null;
    phoneNumber_not_contains?: string | null;
    phoneNumber_starts_with?: string | null;
    phoneNumber_not_starts_with?: string | null;
    phoneNumber_ends_with?: string | null;
    phoneNumber_not_ends_with?: string | null;
    name?: string | null;
    name_not?: string | null;
    name_in?: string[] | null;
    name_not_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_contains?: string | null;
    name_not_contains?: string | null;
    name_starts_with?: string | null;
    name_not_starts_with?: string | null;
    name_ends_with?: string | null;
    name_not_ends_with?: string | null;
    address?: string | null;
    address_not?: string | null;
    address_in?: string[] | null;
    address_not_in?: string[] | null;
    address_lt?: string | null;
    address_lte?: string | null;
    address_gt?: string | null;
    address_gte?: string | null;
    address_contains?: string | null;
    address_not_contains?: string | null;
    address_starts_with?: string | null;
    address_not_starts_with?: string | null;
    address_ends_with?: string | null;
    address_not_ends_with?: string | null;
    birthDate?: string | null;
    birthDate_not?: string | null;
    birthDate_in?: string[] | null;
    birthDate_not_in?: string[] | null;
    birthDate_lt?: string | null;
    birthDate_lte?: string | null;
    birthDate_gt?: string | null;
    birthDate_gte?: string | null;
    birthDate_contains?: string | null;
    birthDate_not_contains?: string | null;
    birthDate_starts_with?: string | null;
    birthDate_not_starts_with?: string | null;
    birthDate_ends_with?: string | null;
    birthDate_not_ends_with?: string | null;
  }
  export interface UserWhereUniqueInput {
    id?: string | null;
    email?: string | null;
  }

  export interface ArgsUsers {
    where?: UserWhereInput | null;
    orderBy?: UserOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsUser {
    where: UserWhereUniqueInput;
  }

  export interface ArgsUsersConnection {
    where?: UserWhereInput | null;
    orderBy?: UserOrderByInput | null;
    skip?: number | null;
    after?: string | null;
    before?: string | null;
    first?: number | null;
    last?: number | null;
  }

  export interface ArgsNode {
    id: string;
  }

  export type UsersResolver =
    | ((
        parent: undefined,
        args: ArgsUsers,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<User | null> | Promise<Array<User | null>>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<User | null> | Promise<Array<User | null>>;
      };

  export type UserResolver =
    | ((
        parent: undefined,
        args: ArgsUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type UsersConnectionResolver =
    | ((
        parent: undefined,
        args: ArgsUsersConnection,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UserConnection | Promise<UserConnection>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUsersConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserConnection | Promise<UserConnection>;
      };

  export type NodeResolver =
    | ((
        parent: undefined,
        args: ArgsNode,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsNode,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export interface Type {
    users:
      | ((
          parent: undefined,
          args: ArgsUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<User | null> | Promise<Array<User | null>>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUsers,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<User | null> | Promise<Array<User | null>>;
        };

    user:
      | ((
          parent: undefined,
          args: ArgsUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    usersConnection:
      | ((
          parent: undefined,
          args: ArgsUsersConnection,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserConnection | Promise<UserConnection>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUsersConnection,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UserConnection | Promise<UserConnection>;
        };

    node:
      | ((
          parent: undefined,
          args: ArgsNode,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsNode,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => (parent.email === undefined ? null : parent.email),
    phoneNumber: (parent: User) =>
      parent.phoneNumber === undefined ? null : parent.phoneNumber,
    name: (parent: User) => (parent.name === undefined ? null : parent.name),
    address: (parent: User) =>
      parent.address === undefined ? null : parent.address,
    birthDate: (parent: User) =>
      parent.birthDate === undefined ? null : parent.birthDate
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type PhoneNumberResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type NameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type AddressResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type BirthDateResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    phoneNumber:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    name:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    address:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    birthDate:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    __isTypeOf?: GraphQLIsTypeOfFn<User, Context>;
  }
}

export namespace UserConnectionResolvers {
  export const defaultResolvers = {
    pageInfo: (parent: UserConnection) => parent.pageInfo,
    edges: (parent: UserConnection) => parent.edges
  };

  export type PageInfoResolver =
    | ((
        parent: UserConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => PageInfo | Promise<PageInfo>)
    | {
        fragment: string;
        resolve: (
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>;
      };

  export type EdgesResolver =
    | ((
        parent: UserConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Array<UserEdge | null> | Promise<Array<UserEdge | null>>)
    | {
        fragment: string;
        resolve: (
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<UserEdge | null> | Promise<Array<UserEdge | null>>;
      };

  export type AggregateResolver =
    | ((
        parent: UserConnection,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AggregateUser | Promise<AggregateUser>)
    | {
        fragment: string;
        resolve: (
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateUser | Promise<AggregateUser>;
      };

  export interface Type {
    pageInfo:
      | ((
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => PageInfo | Promise<PageInfo>)
      | {
          fragment: string;
          resolve: (
            parent: UserConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => PageInfo | Promise<PageInfo>;
        };

    edges:
      | ((
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Array<UserEdge | null> | Promise<Array<UserEdge | null>>)
      | {
          fragment: string;
          resolve: (
            parent: UserConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Array<UserEdge | null> | Promise<Array<UserEdge | null>>;
        };

    aggregate:
      | ((
          parent: UserConnection,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AggregateUser | Promise<AggregateUser>)
      | {
          fragment: string;
          resolve: (
            parent: UserConnection,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AggregateUser | Promise<AggregateUser>;
        };
  }
}

export namespace PageInfoResolvers {
  export const defaultResolvers = {
    hasNextPage: (parent: PageInfo) => parent.hasNextPage,
    hasPreviousPage: (parent: PageInfo) => parent.hasPreviousPage,
    startCursor: (parent: PageInfo) =>
      parent.startCursor === undefined ? null : parent.startCursor,
    endCursor: (parent: PageInfo) =>
      parent.endCursor === undefined ? null : parent.endCursor
  };

  export type HasNextPageResolver =
    | ((
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type HasPreviousPageResolver =
    | ((
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => boolean | Promise<boolean>)
    | {
        fragment: string;
        resolve: (
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>;
      };

  export type StartCursorResolver =
    | ((
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type EndCursorResolver =
    | ((
        parent: PageInfo,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    hasNextPage:
      | ((
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: PageInfo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    hasPreviousPage:
      | ((
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => boolean | Promise<boolean>)
      | {
          fragment: string;
          resolve: (
            parent: PageInfo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => boolean | Promise<boolean>;
        };

    startCursor:
      | ((
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: PageInfo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    endCursor:
      | ((
          parent: PageInfo,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: PageInfo,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };
  }
}

export namespace UserEdgeResolvers {
  export const defaultResolvers = {
    node: (parent: UserEdge) => parent.node,
    cursor: (parent: UserEdge) => parent.cursor
  };

  export type NodeResolver =
    | ((
        parent: UserEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: UserEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type CursorResolver =
    | ((
        parent: UserEdge,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: UserEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    node:
      | ((
          parent: UserEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: UserEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    cursor:
      | ((
          parent: UserEdge,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: UserEdge,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace AggregateUserResolvers {
  export const defaultResolvers = {
    count: (parent: AggregateUser) => parent.count
  };

  export type CountResolver =
    | ((
        parent: AggregateUser,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => number | Promise<number>)
    | {
        fragment: string;
        resolve: (
          parent: AggregateUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>;
      };

  export interface Type {
    count:
      | ((
          parent: AggregateUser,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => number | Promise<number>)
      | {
          fragment: string;
          resolve: (
            parent: AggregateUser,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => number | Promise<number>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface UserCreateInput {
    id?: string | null;
    email?: string | null;
    phoneNumber?: string | null;
    name?: string | null;
    address?: string | null;
    birthDate?: string | null;
  }
  export interface UserUpdateInput {
    email?: string | null;
    phoneNumber?: string | null;
    name?: string | null;
    address?: string | null;
    birthDate?: string | null;
  }
  export interface UserWhereUniqueInput {
    id?: string | null;
    email?: string | null;
  }
  export interface UserUpdateManyMutationInput {
    email?: string | null;
    phoneNumber?: string | null;
    name?: string | null;
    address?: string | null;
    birthDate?: string | null;
  }
  export interface UserWhereInput {
    AND?: UserWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    phoneNumber?: string | null;
    phoneNumber_not?: string | null;
    phoneNumber_in?: string[] | null;
    phoneNumber_not_in?: string[] | null;
    phoneNumber_lt?: string | null;
    phoneNumber_lte?: string | null;
    phoneNumber_gt?: string | null;
    phoneNumber_gte?: string | null;
    phoneNumber_contains?: string | null;
    phoneNumber_not_contains?: string | null;
    phoneNumber_starts_with?: string | null;
    phoneNumber_not_starts_with?: string | null;
    phoneNumber_ends_with?: string | null;
    phoneNumber_not_ends_with?: string | null;
    name?: string | null;
    name_not?: string | null;
    name_in?: string[] | null;
    name_not_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_contains?: string | null;
    name_not_contains?: string | null;
    name_starts_with?: string | null;
    name_not_starts_with?: string | null;
    name_ends_with?: string | null;
    name_not_ends_with?: string | null;
    address?: string | null;
    address_not?: string | null;
    address_in?: string[] | null;
    address_not_in?: string[] | null;
    address_lt?: string | null;
    address_lte?: string | null;
    address_gt?: string | null;
    address_gte?: string | null;
    address_contains?: string | null;
    address_not_contains?: string | null;
    address_starts_with?: string | null;
    address_not_starts_with?: string | null;
    address_ends_with?: string | null;
    address_not_ends_with?: string | null;
    birthDate?: string | null;
    birthDate_not?: string | null;
    birthDate_in?: string[] | null;
    birthDate_not_in?: string[] | null;
    birthDate_lt?: string | null;
    birthDate_lte?: string | null;
    birthDate_gt?: string | null;
    birthDate_gte?: string | null;
    birthDate_contains?: string | null;
    birthDate_not_contains?: string | null;
    birthDate_starts_with?: string | null;
    birthDate_not_starts_with?: string | null;
    birthDate_ends_with?: string | null;
    birthDate_not_ends_with?: string | null;
  }

  export interface ArgsCreateUser {
    data: UserCreateInput;
  }

  export interface ArgsUpdateUser {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }

  export interface ArgsDeleteUser {
    where: UserWhereUniqueInput;
  }

  export interface ArgsUpsertUser {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }

  export interface ArgsUpdateManyUsers {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput | null;
  }

  export interface ArgsDeleteManyUsers {
    where?: UserWhereInput | null;
  }

  export type CreateUserResolver =
    | ((
        parent: undefined,
        args: ArgsCreateUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type UpdateUserResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type DeleteUserResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type UpsertUserResolver =
    | ((
        parent: undefined,
        args: ArgsUpsertUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpsertUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type UpdateManyUsersResolver =
    | ((
        parent: undefined,
        args: ArgsUpdateManyUsers,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => BatchPayload | Promise<BatchPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsUpdateManyUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>;
      };

  export type DeleteManyUsersResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteManyUsers,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => BatchPayload | Promise<BatchPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteManyUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>;
      };

  export interface Type {
    createUser:
      | ((
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    updateUser:
      | ((
          parent: undefined,
          args: ArgsUpdateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    deleteUser:
      | ((
          parent: undefined,
          args: ArgsDeleteUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    upsertUser:
      | ((
          parent: undefined,
          args: ArgsUpsertUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpsertUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    updateManyUsers:
      | ((
          parent: undefined,
          args: ArgsUpdateManyUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsUpdateManyUsers,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => BatchPayload | Promise<BatchPayload>;
        };

    deleteManyUsers:
      | ((
          parent: undefined,
          args: ArgsDeleteManyUsers,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => BatchPayload | Promise<BatchPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteManyUsers,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => BatchPayload | Promise<BatchPayload>;
        };
  }
}

export namespace BatchPayloadResolvers {
  export const defaultResolvers = {
    count: (parent: BatchPayload) => parent.count
  };

  export type CountResolver =
    | ((
        parent: BatchPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: BatchPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    count:
      | ((
          parent: BatchPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: BatchPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace SubscriptionResolvers {
  export const defaultResolvers = {};

  export interface UserSubscriptionWhereInput {
    AND?: UserSubscriptionWhereInput[] | null;
    mutation_in?: MutationType[] | null;
    updatedFields_contains?: string | null;
    updatedFields_contains_every?: string[] | null;
    updatedFields_contains_some?: string[] | null;
    node?: UserWhereInput | null;
  }
  export interface UserWhereInput {
    AND?: UserWhereInput[] | null;
    id?: string | null;
    id_not?: string | null;
    id_in?: string[] | null;
    id_not_in?: string[] | null;
    id_lt?: string | null;
    id_lte?: string | null;
    id_gt?: string | null;
    id_gte?: string | null;
    id_contains?: string | null;
    id_not_contains?: string | null;
    id_starts_with?: string | null;
    id_not_starts_with?: string | null;
    id_ends_with?: string | null;
    id_not_ends_with?: string | null;
    email?: string | null;
    email_not?: string | null;
    email_in?: string[] | null;
    email_not_in?: string[] | null;
    email_lt?: string | null;
    email_lte?: string | null;
    email_gt?: string | null;
    email_gte?: string | null;
    email_contains?: string | null;
    email_not_contains?: string | null;
    email_starts_with?: string | null;
    email_not_starts_with?: string | null;
    email_ends_with?: string | null;
    email_not_ends_with?: string | null;
    phoneNumber?: string | null;
    phoneNumber_not?: string | null;
    phoneNumber_in?: string[] | null;
    phoneNumber_not_in?: string[] | null;
    phoneNumber_lt?: string | null;
    phoneNumber_lte?: string | null;
    phoneNumber_gt?: string | null;
    phoneNumber_gte?: string | null;
    phoneNumber_contains?: string | null;
    phoneNumber_not_contains?: string | null;
    phoneNumber_starts_with?: string | null;
    phoneNumber_not_starts_with?: string | null;
    phoneNumber_ends_with?: string | null;
    phoneNumber_not_ends_with?: string | null;
    name?: string | null;
    name_not?: string | null;
    name_in?: string[] | null;
    name_not_in?: string[] | null;
    name_lt?: string | null;
    name_lte?: string | null;
    name_gt?: string | null;
    name_gte?: string | null;
    name_contains?: string | null;
    name_not_contains?: string | null;
    name_starts_with?: string | null;
    name_not_starts_with?: string | null;
    name_ends_with?: string | null;
    name_not_ends_with?: string | null;
    address?: string | null;
    address_not?: string | null;
    address_in?: string[] | null;
    address_not_in?: string[] | null;
    address_lt?: string | null;
    address_lte?: string | null;
    address_gt?: string | null;
    address_gte?: string | null;
    address_contains?: string | null;
    address_not_contains?: string | null;
    address_starts_with?: string | null;
    address_not_starts_with?: string | null;
    address_ends_with?: string | null;
    address_not_ends_with?: string | null;
    birthDate?: string | null;
    birthDate_not?: string | null;
    birthDate_in?: string[] | null;
    birthDate_not_in?: string[] | null;
    birthDate_lt?: string | null;
    birthDate_lte?: string | null;
    birthDate_gt?: string | null;
    birthDate_gte?: string | null;
    birthDate_contains?: string | null;
    birthDate_not_contains?: string | null;
    birthDate_starts_with?: string | null;
    birthDate_not_starts_with?: string | null;
    birthDate_ends_with?: string | null;
    birthDate_not_ends_with?: string | null;
  }

  export interface ArgsUser {
    where?: UserSubscriptionWhereInput | null;
  }

  export type UserResolver = {
    subscribe: (
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | AsyncIterator<UserSubscriptionPayload | null>
      | Promise<AsyncIterator<UserSubscriptionPayload | null>>;
    resolve?: (
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | UserSubscriptionPayload
      | null
      | Promise<UserSubscriptionPayload | null>;
  };

  export interface Type {
    user: {
      subscribe: (
        parent: undefined,
        args: ArgsUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | AsyncIterator<UserSubscriptionPayload | null>
        | Promise<AsyncIterator<UserSubscriptionPayload | null>>;
      resolve?: (
        parent: undefined,
        args: ArgsUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) =>
        | UserSubscriptionPayload
        | null
        | Promise<UserSubscriptionPayload | null>;
    };
  }
}

export namespace UserSubscriptionPayloadResolvers {
  export const defaultResolvers = {
    mutation: (parent: UserSubscriptionPayload) => parent.mutation,
    node: (parent: UserSubscriptionPayload) => parent.node,
    updatedFields: (parent: UserSubscriptionPayload) => parent.updatedFields,
    previousValues: (parent: UserSubscriptionPayload) => parent.previousValues
  };

  export type MutationResolver =
    | ((
        parent: UserSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => MutationType | Promise<MutationType>)
    | {
        fragment: string;
        resolve: (
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>;
      };

  export type NodeResolver =
    | ((
        parent: UserSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | null | Promise<User | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>;
      };

  export type UpdatedFieldsResolver =
    | ((
        parent: UserSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string[] | null | Promise<string[] | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>;
      };

  export type PreviousValuesResolver =
    | ((
        parent: UserSubscriptionPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UserPreviousValues | null | Promise<UserPreviousValues | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserPreviousValues | null | Promise<UserPreviousValues | null>;
      };

  export interface Type {
    mutation:
      | ((
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => MutationType | Promise<MutationType>)
      | {
          fragment: string;
          resolve: (
            parent: UserSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => MutationType | Promise<MutationType>;
        };

    node:
      | ((
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | null | Promise<User | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | null | Promise<User | null>;
        };

    updatedFields:
      | ((
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string[] | null | Promise<string[] | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string[] | null | Promise<string[] | null>;
        };

    previousValues:
      | ((
          parent: UserSubscriptionPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserPreviousValues | null | Promise<UserPreviousValues | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserSubscriptionPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UserPreviousValues | null | Promise<UserPreviousValues | null>;
        };
  }
}

export namespace UserPreviousValuesResolvers {
  export const defaultResolvers = {
    id: (parent: UserPreviousValues) => parent.id,
    email: (parent: UserPreviousValues) =>
      parent.email === undefined ? null : parent.email,
    phoneNumber: (parent: UserPreviousValues) =>
      parent.phoneNumber === undefined ? null : parent.phoneNumber,
    name: (parent: UserPreviousValues) =>
      parent.name === undefined ? null : parent.name,
    address: (parent: UserPreviousValues) =>
      parent.address === undefined ? null : parent.address,
    birthDate: (parent: UserPreviousValues) =>
      parent.birthDate === undefined ? null : parent.birthDate
  };

  export type IdResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type PhoneNumberResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type NameResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type AddressResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type BirthDateResolver =
    | ((
        parent: UserPreviousValues,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export interface Type {
    id:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    phoneNumber:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    name:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    address:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    birthDate:
      | ((
          parent: UserPreviousValues,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: UserPreviousValues,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };
  }
}

export namespace NodeResolvers {
  export interface Type {
    __resolveType: (
      value: User,
      context: Context,
      info: GraphQLResolveInfo
    ) => "User" | Promise<"User">;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  UserConnection: UserConnectionResolvers.Type;
  PageInfo: PageInfoResolvers.Type;
  UserEdge: UserEdgeResolvers.Type;
  AggregateUser: AggregateUserResolvers.Type;
  Mutation: MutationResolvers.Type;
  BatchPayload: BatchPayloadResolvers.Type;
  Subscription: SubscriptionResolvers.Type;
  UserSubscriptionPayload: UserSubscriptionPayloadResolvers.Type;
  UserPreviousValues: UserPreviousValuesResolvers.Type;
  Node?: NodeResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
