// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  attribute: (where?: AttributeWhereInput) => Promise<boolean>;
  email: (where?: EmailWhereInput) => Promise<boolean>;
  female: (where?: FemaleWhereInput) => Promise<boolean>;
  identifiers: (where?: IdentifiersWhereInput) => Promise<boolean>;
  male: (where?: MaleWhereInput) => Promise<boolean>;
  phoneNumber: (where?: PhoneNumberWhereInput) => Promise<boolean>;
  taxId: (where?: TaxIdWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  attribute: (where: AttributeWhereUniqueInput) => AttributeNullablePromise;
  attributes: (args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Attribute>;
  attributesConnection: (args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AttributeConnectionPromise;
  email: (where: EmailWhereUniqueInput) => EmailNullablePromise;
  emails: (args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Email>;
  emailsConnection: (args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmailConnectionPromise;
  female: (where: FemaleWhereUniqueInput) => FemaleNullablePromise;
  females: (args?: {
    where?: FemaleWhereInput;
    orderBy?: FemaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Female>;
  femalesConnection: (args?: {
    where?: FemaleWhereInput;
    orderBy?: FemaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FemaleConnectionPromise;
  identifiers: (
    where: IdentifiersWhereUniqueInput
  ) => IdentifiersNullablePromise;
  identifierses: (args?: {
    where?: IdentifiersWhereInput;
    orderBy?: IdentifiersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Identifiers>;
  identifiersesConnection: (args?: {
    where?: IdentifiersWhereInput;
    orderBy?: IdentifiersOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IdentifiersConnectionPromise;
  male: (where: MaleWhereUniqueInput) => MaleNullablePromise;
  males: (args?: {
    where?: MaleWhereInput;
    orderBy?: MaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Male>;
  malesConnection: (args?: {
    where?: MaleWhereInput;
    orderBy?: MaleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MaleConnectionPromise;
  phoneNumber: (
    where: PhoneNumberWhereUniqueInput
  ) => PhoneNumberNullablePromise;
  phoneNumbers: (args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PhoneNumber>;
  phoneNumbersConnection: (args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PhoneNumberConnectionPromise;
  taxId: (where: TaxIdWhereUniqueInput) => TaxIdNullablePromise;
  taxIds: (args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TaxId>;
  taxIdsConnection: (args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaxIdConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAttribute: (data: AttributeCreateInput) => AttributePromise;
  updateAttribute: (args: {
    data: AttributeUpdateInput;
    where: AttributeWhereUniqueInput;
  }) => AttributePromise;
  updateManyAttributes: (args: {
    data: AttributeUpdateManyMutationInput;
    where?: AttributeWhereInput;
  }) => BatchPayloadPromise;
  upsertAttribute: (args: {
    where: AttributeWhereUniqueInput;
    create: AttributeCreateInput;
    update: AttributeUpdateInput;
  }) => AttributePromise;
  deleteAttribute: (where: AttributeWhereUniqueInput) => AttributePromise;
  deleteManyAttributes: (where?: AttributeWhereInput) => BatchPayloadPromise;
  createEmail: (data: EmailCreateInput) => EmailPromise;
  updateEmail: (args: {
    data: EmailUpdateInput;
    where: EmailWhereUniqueInput;
  }) => EmailPromise;
  updateManyEmails: (args: {
    data: EmailUpdateManyMutationInput;
    where?: EmailWhereInput;
  }) => BatchPayloadPromise;
  upsertEmail: (args: {
    where: EmailWhereUniqueInput;
    create: EmailCreateInput;
    update: EmailUpdateInput;
  }) => EmailPromise;
  deleteEmail: (where: EmailWhereUniqueInput) => EmailPromise;
  deleteManyEmails: (where?: EmailWhereInput) => BatchPayloadPromise;
  createFemale: (data: FemaleCreateInput) => FemalePromise;
  updateFemale: (args: {
    data: FemaleUpdateInput;
    where: FemaleWhereUniqueInput;
  }) => FemalePromise;
  upsertFemale: (args: {
    where: FemaleWhereUniqueInput;
    create: FemaleCreateInput;
    update: FemaleUpdateInput;
  }) => FemalePromise;
  deleteFemale: (where: FemaleWhereUniqueInput) => FemalePromise;
  deleteManyFemales: (where?: FemaleWhereInput) => BatchPayloadPromise;
  createIdentifiers: (data: IdentifiersCreateInput) => IdentifiersPromise;
  updateIdentifiers: (args: {
    data: IdentifiersUpdateInput;
    where: IdentifiersWhereUniqueInput;
  }) => IdentifiersPromise;
  upsertIdentifiers: (args: {
    where: IdentifiersWhereUniqueInput;
    create: IdentifiersCreateInput;
    update: IdentifiersUpdateInput;
  }) => IdentifiersPromise;
  deleteIdentifiers: (where: IdentifiersWhereUniqueInput) => IdentifiersPromise;
  deleteManyIdentifierses: (
    where?: IdentifiersWhereInput
  ) => BatchPayloadPromise;
  createMale: (data: MaleCreateInput) => MalePromise;
  updateMale: (args: {
    data: MaleUpdateInput;
    where: MaleWhereUniqueInput;
  }) => MalePromise;
  upsertMale: (args: {
    where: MaleWhereUniqueInput;
    create: MaleCreateInput;
    update: MaleUpdateInput;
  }) => MalePromise;
  deleteMale: (where: MaleWhereUniqueInput) => MalePromise;
  deleteManyMales: (where?: MaleWhereInput) => BatchPayloadPromise;
  createPhoneNumber: (data: PhoneNumberCreateInput) => PhoneNumberPromise;
  updatePhoneNumber: (args: {
    data: PhoneNumberUpdateInput;
    where: PhoneNumberWhereUniqueInput;
  }) => PhoneNumberPromise;
  updateManyPhoneNumbers: (args: {
    data: PhoneNumberUpdateManyMutationInput;
    where?: PhoneNumberWhereInput;
  }) => BatchPayloadPromise;
  upsertPhoneNumber: (args: {
    where: PhoneNumberWhereUniqueInput;
    create: PhoneNumberCreateInput;
    update: PhoneNumberUpdateInput;
  }) => PhoneNumberPromise;
  deletePhoneNumber: (where: PhoneNumberWhereUniqueInput) => PhoneNumberPromise;
  deleteManyPhoneNumbers: (
    where?: PhoneNumberWhereInput
  ) => BatchPayloadPromise;
  createTaxId: (data: TaxIdCreateInput) => TaxIdPromise;
  updateTaxId: (args: {
    data: TaxIdUpdateInput;
    where: TaxIdWhereUniqueInput;
  }) => TaxIdPromise;
  upsertTaxId: (args: {
    where: TaxIdWhereUniqueInput;
    create: TaxIdCreateInput;
    update: TaxIdUpdateInput;
  }) => TaxIdPromise;
  deleteTaxId: (where: TaxIdWhereUniqueInput) => TaxIdPromise;
  deleteManyTaxIds: (where?: TaxIdWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  attribute: (
    where?: AttributeSubscriptionWhereInput
  ) => AttributeSubscriptionPayloadSubscription;
  email: (
    where?: EmailSubscriptionWhereInput
  ) => EmailSubscriptionPayloadSubscription;
  female: (
    where?: FemaleSubscriptionWhereInput
  ) => FemaleSubscriptionPayloadSubscription;
  identifiers: (
    where?: IdentifiersSubscriptionWhereInput
  ) => IdentifiersSubscriptionPayloadSubscription;
  male: (
    where?: MaleSubscriptionWhereInput
  ) => MaleSubscriptionPayloadSubscription;
  phoneNumber: (
    where?: PhoneNumberSubscriptionWhereInput
  ) => PhoneNumberSubscriptionPayloadSubscription;
  taxId: (
    where?: TaxIdSubscriptionWhereInput
  ) => TaxIdSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AuthLevel = "ADMIN" | "USER" | "PROSPECT" | "BLACKLISTED";

export type Gender = "M" | "F";

export type TaxIdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PhoneNumberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AttributeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "attr_type_ASC"
  | "attr_type_DESC";

export type EmailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FemaleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IdentifiersOrderByInput = "id_ASC" | "id_DESC";

export type MaleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "email_ASC"
  | "email_DESC"
  | "role_ASC"
  | "role_DESC"
  | "gender_ASC"
  | "gender_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AttributeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TaxIdWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  attribute_every?: Maybe<AttributeWhereInput>;
  attribute_some?: Maybe<AttributeWhereInput>;
  attribute_none?: Maybe<AttributeWhereInput>;
  AND?: Maybe<TaxIdWhereInput[] | TaxIdWhereInput>;
  OR?: Maybe<TaxIdWhereInput[] | TaxIdWhereInput>;
  NOT?: Maybe<TaxIdWhereInput[] | TaxIdWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone_number_every?: Maybe<PhoneNumberWhereInput>;
  phone_number_some?: Maybe<PhoneNumberWhereInput>;
  phone_number_none?: Maybe<PhoneNumberWhereInput>;
  role?: Maybe<AuthLevel>;
  role_not?: Maybe<AuthLevel>;
  role_in?: Maybe<AuthLevel[] | AuthLevel>;
  role_not_in?: Maybe<AuthLevel[] | AuthLevel>;
  gender?: Maybe<Gender>;
  gender_not?: Maybe<Gender>;
  gender_in?: Maybe<Gender[] | Gender>;
  gender_not_in?: Maybe<Gender[] | Gender>;
  identifiers?: Maybe<IdentifiersWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PhoneNumberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<Int>;
  value_not?: Maybe<Int>;
  value_in?: Maybe<Int[] | Int>;
  value_not_in?: Maybe<Int[] | Int>;
  value_lt?: Maybe<Int>;
  value_lte?: Maybe<Int>;
  value_gt?: Maybe<Int>;
  value_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  attribute_every?: Maybe<AttributeWhereInput>;
  attribute_some?: Maybe<AttributeWhereInput>;
  attribute_none?: Maybe<AttributeWhereInput>;
  AND?: Maybe<PhoneNumberWhereInput[] | PhoneNumberWhereInput>;
  OR?: Maybe<PhoneNumberWhereInput[] | PhoneNumberWhereInput>;
  NOT?: Maybe<PhoneNumberWhereInput[] | PhoneNumberWhereInput>;
}

export interface AttributeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  attr_type?: Maybe<String>;
  attr_type_not?: Maybe<String>;
  attr_type_in?: Maybe<String[] | String>;
  attr_type_not_in?: Maybe<String[] | String>;
  attr_type_lt?: Maybe<String>;
  attr_type_lte?: Maybe<String>;
  attr_type_gt?: Maybe<String>;
  attr_type_gte?: Maybe<String>;
  attr_type_contains?: Maybe<String>;
  attr_type_not_contains?: Maybe<String>;
  attr_type_starts_with?: Maybe<String>;
  attr_type_not_starts_with?: Maybe<String>;
  attr_type_ends_with?: Maybe<String>;
  attr_type_not_ends_with?: Maybe<String>;
  tax_id_every?: Maybe<TaxIdWhereInput>;
  tax_id_some?: Maybe<TaxIdWhereInput>;
  tax_id_none?: Maybe<TaxIdWhereInput>;
  email_every?: Maybe<EmailWhereInput>;
  email_some?: Maybe<EmailWhereInput>;
  email_none?: Maybe<EmailWhereInput>;
  phone_number_every?: Maybe<PhoneNumberWhereInput>;
  phone_number_some?: Maybe<PhoneNumberWhereInput>;
  phone_number_none?: Maybe<PhoneNumberWhereInput>;
  AND?: Maybe<AttributeWhereInput[] | AttributeWhereInput>;
  OR?: Maybe<AttributeWhereInput[] | AttributeWhereInput>;
  NOT?: Maybe<AttributeWhereInput[] | AttributeWhereInput>;
}

export interface EmailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  attribute_every?: Maybe<AttributeWhereInput>;
  attribute_some?: Maybe<AttributeWhereInput>;
  attribute_none?: Maybe<AttributeWhereInput>;
  AND?: Maybe<EmailWhereInput[] | EmailWhereInput>;
  OR?: Maybe<EmailWhereInput[] | EmailWhereInput>;
  NOT?: Maybe<EmailWhereInput[] | EmailWhereInput>;
}

export interface IdentifiersWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  tax_id_every?: Maybe<TaxIdWhereInput>;
  tax_id_some?: Maybe<TaxIdWhereInput>;
  tax_id_none?: Maybe<TaxIdWhereInput>;
  email_every?: Maybe<EmailWhereInput>;
  email_some?: Maybe<EmailWhereInput>;
  email_none?: Maybe<EmailWhereInput>;
  phone_number_every?: Maybe<PhoneNumberWhereInput>;
  phone_number_some?: Maybe<PhoneNumberWhereInput>;
  phone_number_none?: Maybe<PhoneNumberWhereInput>;
  AND?: Maybe<IdentifiersWhereInput[] | IdentifiersWhereInput>;
  OR?: Maybe<IdentifiersWhereInput[] | IdentifiersWhereInput>;
  NOT?: Maybe<IdentifiersWhereInput[] | IdentifiersWhereInput>;
}

export type EmailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FemaleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FemaleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  attribute_every?: Maybe<AttributeWhereInput>;
  attribute_some?: Maybe<AttributeWhereInput>;
  attribute_none?: Maybe<AttributeWhereInput>;
  AND?: Maybe<FemaleWhereInput[] | FemaleWhereInput>;
  OR?: Maybe<FemaleWhereInput[] | FemaleWhereInput>;
  NOT?: Maybe<FemaleWhereInput[] | FemaleWhereInput>;
}

export type IdentifiersWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MaleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MaleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  attribute_every?: Maybe<AttributeWhereInput>;
  attribute_some?: Maybe<AttributeWhereInput>;
  attribute_none?: Maybe<AttributeWhereInput>;
  AND?: Maybe<MaleWhereInput[] | MaleWhereInput>;
  OR?: Maybe<MaleWhereInput[] | MaleWhereInput>;
  NOT?: Maybe<MaleWhereInput[] | MaleWhereInput>;
}

export type PhoneNumberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TaxIdWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AttributeCreateInput {
  id?: Maybe<ID_Input>;
  attr_type: String;
  tax_id?: Maybe<TaxIdCreateManyWithoutAttributeInput>;
  email?: Maybe<EmailCreateManyWithoutAttributeInput>;
  phone_number?: Maybe<PhoneNumberCreateManyWithoutAttributeInput>;
}

export interface TaxIdCreateManyWithoutAttributeInput {
  create?: Maybe<
    TaxIdCreateWithoutAttributeInput[] | TaxIdCreateWithoutAttributeInput
  >;
  connect?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
}

export interface TaxIdCreateWithoutAttributeInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  phone_number?: Maybe<PhoneNumberCreateManyWithoutOwnerInput>;
  role?: Maybe<AuthLevel>;
  gender: Gender;
  identifiers: IdentifiersCreateOneInput;
}

export interface PhoneNumberCreateManyWithoutOwnerInput {
  create?: Maybe<
    PhoneNumberCreateWithoutOwnerInput[] | PhoneNumberCreateWithoutOwnerInput
  >;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
}

export interface PhoneNumberCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  value?: Maybe<Int>;
  attribute?: Maybe<AttributeCreateManyWithoutPhone_numberInput>;
}

export interface AttributeCreateManyWithoutPhone_numberInput {
  create?: Maybe<
    | AttributeCreateWithoutPhone_numberInput[]
    | AttributeCreateWithoutPhone_numberInput
  >;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
}

export interface AttributeCreateWithoutPhone_numberInput {
  id?: Maybe<ID_Input>;
  attr_type: String;
  tax_id?: Maybe<TaxIdCreateManyWithoutAttributeInput>;
  email?: Maybe<EmailCreateManyWithoutAttributeInput>;
}

export interface EmailCreateManyWithoutAttributeInput {
  create?: Maybe<
    EmailCreateWithoutAttributeInput[] | EmailCreateWithoutAttributeInput
  >;
  connect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
}

export interface EmailCreateWithoutAttributeInput {
  id?: Maybe<ID_Input>;
  value: String;
  owner: UserCreateOneInput;
}

export interface IdentifiersCreateOneInput {
  create?: Maybe<IdentifiersCreateInput>;
  connect?: Maybe<IdentifiersWhereUniqueInput>;
}

export interface IdentifiersCreateInput {
  id?: Maybe<ID_Input>;
  tax_id?: Maybe<TaxIdCreateManyInput>;
  email?: Maybe<EmailCreateManyInput>;
  phone_number?: Maybe<PhoneNumberCreateManyInput>;
}

export interface TaxIdCreateManyInput {
  create?: Maybe<TaxIdCreateInput[] | TaxIdCreateInput>;
  connect?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
}

export interface TaxIdCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  attribute?: Maybe<AttributeCreateManyWithoutTax_idInput>;
}

export interface AttributeCreateManyWithoutTax_idInput {
  create?: Maybe<
    AttributeCreateWithoutTax_idInput[] | AttributeCreateWithoutTax_idInput
  >;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
}

export interface AttributeCreateWithoutTax_idInput {
  id?: Maybe<ID_Input>;
  attr_type: String;
  email?: Maybe<EmailCreateManyWithoutAttributeInput>;
  phone_number?: Maybe<PhoneNumberCreateManyWithoutAttributeInput>;
}

export interface PhoneNumberCreateManyWithoutAttributeInput {
  create?: Maybe<
    | PhoneNumberCreateWithoutAttributeInput[]
    | PhoneNumberCreateWithoutAttributeInput
  >;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
}

export interface PhoneNumberCreateWithoutAttributeInput {
  id?: Maybe<ID_Input>;
  value?: Maybe<Int>;
  owner: UserCreateOneWithoutPhone_numberInput;
}

export interface UserCreateOneWithoutPhone_numberInput {
  create?: Maybe<UserCreateWithoutPhone_numberInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPhone_numberInput {
  id?: Maybe<ID_Input>;
  email: String;
  role?: Maybe<AuthLevel>;
  gender: Gender;
  identifiers: IdentifiersCreateOneInput;
}

export interface EmailCreateManyInput {
  create?: Maybe<EmailCreateInput[] | EmailCreateInput>;
  connect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
}

export interface EmailCreateInput {
  id?: Maybe<ID_Input>;
  value: String;
  owner: UserCreateOneInput;
  attribute?: Maybe<AttributeCreateManyWithoutEmailInput>;
}

export interface AttributeCreateManyWithoutEmailInput {
  create?: Maybe<
    AttributeCreateWithoutEmailInput[] | AttributeCreateWithoutEmailInput
  >;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
}

export interface AttributeCreateWithoutEmailInput {
  id?: Maybe<ID_Input>;
  attr_type: String;
  tax_id?: Maybe<TaxIdCreateManyWithoutAttributeInput>;
  phone_number?: Maybe<PhoneNumberCreateManyWithoutAttributeInput>;
}

export interface PhoneNumberCreateManyInput {
  create?: Maybe<PhoneNumberCreateInput[] | PhoneNumberCreateInput>;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
}

export interface PhoneNumberCreateInput {
  id?: Maybe<ID_Input>;
  value?: Maybe<Int>;
  owner: UserCreateOneWithoutPhone_numberInput;
  attribute?: Maybe<AttributeCreateManyWithoutPhone_numberInput>;
}

export interface AttributeUpdateInput {
  attr_type?: Maybe<String>;
  tax_id?: Maybe<TaxIdUpdateManyWithoutAttributeInput>;
  email?: Maybe<EmailUpdateManyWithoutAttributeInput>;
  phone_number?: Maybe<PhoneNumberUpdateManyWithoutAttributeInput>;
}

export interface TaxIdUpdateManyWithoutAttributeInput {
  create?: Maybe<
    TaxIdCreateWithoutAttributeInput[] | TaxIdCreateWithoutAttributeInput
  >;
  delete?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  connect?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  set?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  disconnect?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  update?: Maybe<
    | TaxIdUpdateWithWhereUniqueWithoutAttributeInput[]
    | TaxIdUpdateWithWhereUniqueWithoutAttributeInput
  >;
  upsert?: Maybe<
    | TaxIdUpsertWithWhereUniqueWithoutAttributeInput[]
    | TaxIdUpsertWithWhereUniqueWithoutAttributeInput
  >;
  deleteMany?: Maybe<TaxIdScalarWhereInput[] | TaxIdScalarWhereInput>;
}

export interface TaxIdUpdateWithWhereUniqueWithoutAttributeInput {
  where: TaxIdWhereUniqueInput;
  data: TaxIdUpdateWithoutAttributeDataInput;
}

export interface TaxIdUpdateWithoutAttributeDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  phone_number?: Maybe<PhoneNumberUpdateManyWithoutOwnerInput>;
  role?: Maybe<AuthLevel>;
  gender?: Maybe<Gender>;
  identifiers?: Maybe<IdentifiersUpdateOneRequiredInput>;
}

export interface PhoneNumberUpdateManyWithoutOwnerInput {
  create?: Maybe<
    PhoneNumberCreateWithoutOwnerInput[] | PhoneNumberCreateWithoutOwnerInput
  >;
  delete?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  set?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  disconnect?: Maybe<
    PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput
  >;
  update?: Maybe<
    | PhoneNumberUpdateWithWhereUniqueWithoutOwnerInput[]
    | PhoneNumberUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | PhoneNumberUpsertWithWhereUniqueWithoutOwnerInput[]
    | PhoneNumberUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<
    PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput
  >;
  updateMany?: Maybe<
    | PhoneNumberUpdateManyWithWhereNestedInput[]
    | PhoneNumberUpdateManyWithWhereNestedInput
  >;
}

export interface PhoneNumberUpdateWithWhereUniqueWithoutOwnerInput {
  where: PhoneNumberWhereUniqueInput;
  data: PhoneNumberUpdateWithoutOwnerDataInput;
}

export interface PhoneNumberUpdateWithoutOwnerDataInput {
  value?: Maybe<Int>;
  attribute?: Maybe<AttributeUpdateManyWithoutPhone_numberInput>;
}

export interface AttributeUpdateManyWithoutPhone_numberInput {
  create?: Maybe<
    | AttributeCreateWithoutPhone_numberInput[]
    | AttributeCreateWithoutPhone_numberInput
  >;
  delete?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  set?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  disconnect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  update?: Maybe<
    | AttributeUpdateWithWhereUniqueWithoutPhone_numberInput[]
    | AttributeUpdateWithWhereUniqueWithoutPhone_numberInput
  >;
  upsert?: Maybe<
    | AttributeUpsertWithWhereUniqueWithoutPhone_numberInput[]
    | AttributeUpsertWithWhereUniqueWithoutPhone_numberInput
  >;
  deleteMany?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
  updateMany?: Maybe<
    | AttributeUpdateManyWithWhereNestedInput[]
    | AttributeUpdateManyWithWhereNestedInput
  >;
}

export interface AttributeUpdateWithWhereUniqueWithoutPhone_numberInput {
  where: AttributeWhereUniqueInput;
  data: AttributeUpdateWithoutPhone_numberDataInput;
}

export interface AttributeUpdateWithoutPhone_numberDataInput {
  attr_type?: Maybe<String>;
  tax_id?: Maybe<TaxIdUpdateManyWithoutAttributeInput>;
  email?: Maybe<EmailUpdateManyWithoutAttributeInput>;
}

export interface EmailUpdateManyWithoutAttributeInput {
  create?: Maybe<
    EmailCreateWithoutAttributeInput[] | EmailCreateWithoutAttributeInput
  >;
  delete?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  connect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  set?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  disconnect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  update?: Maybe<
    | EmailUpdateWithWhereUniqueWithoutAttributeInput[]
    | EmailUpdateWithWhereUniqueWithoutAttributeInput
  >;
  upsert?: Maybe<
    | EmailUpsertWithWhereUniqueWithoutAttributeInput[]
    | EmailUpsertWithWhereUniqueWithoutAttributeInput
  >;
  deleteMany?: Maybe<EmailScalarWhereInput[] | EmailScalarWhereInput>;
  updateMany?: Maybe<
    EmailUpdateManyWithWhereNestedInput[] | EmailUpdateManyWithWhereNestedInput
  >;
}

export interface EmailUpdateWithWhereUniqueWithoutAttributeInput {
  where: EmailWhereUniqueInput;
  data: EmailUpdateWithoutAttributeDataInput;
}

export interface EmailUpdateWithoutAttributeDataInput {
  value?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredInput>;
}

export interface EmailUpsertWithWhereUniqueWithoutAttributeInput {
  where: EmailWhereUniqueInput;
  update: EmailUpdateWithoutAttributeDataInput;
  create: EmailCreateWithoutAttributeInput;
}

export interface EmailScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<String>;
  value_not?: Maybe<String>;
  value_in?: Maybe<String[] | String>;
  value_not_in?: Maybe<String[] | String>;
  value_lt?: Maybe<String>;
  value_lte?: Maybe<String>;
  value_gt?: Maybe<String>;
  value_gte?: Maybe<String>;
  value_contains?: Maybe<String>;
  value_not_contains?: Maybe<String>;
  value_starts_with?: Maybe<String>;
  value_not_starts_with?: Maybe<String>;
  value_ends_with?: Maybe<String>;
  value_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EmailScalarWhereInput[] | EmailScalarWhereInput>;
  OR?: Maybe<EmailScalarWhereInput[] | EmailScalarWhereInput>;
  NOT?: Maybe<EmailScalarWhereInput[] | EmailScalarWhereInput>;
}

export interface EmailUpdateManyWithWhereNestedInput {
  where: EmailScalarWhereInput;
  data: EmailUpdateManyDataInput;
}

export interface EmailUpdateManyDataInput {
  value?: Maybe<String>;
}

export interface AttributeUpsertWithWhereUniqueWithoutPhone_numberInput {
  where: AttributeWhereUniqueInput;
  update: AttributeUpdateWithoutPhone_numberDataInput;
  create: AttributeCreateWithoutPhone_numberInput;
}

export interface AttributeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  attr_type?: Maybe<String>;
  attr_type_not?: Maybe<String>;
  attr_type_in?: Maybe<String[] | String>;
  attr_type_not_in?: Maybe<String[] | String>;
  attr_type_lt?: Maybe<String>;
  attr_type_lte?: Maybe<String>;
  attr_type_gt?: Maybe<String>;
  attr_type_gte?: Maybe<String>;
  attr_type_contains?: Maybe<String>;
  attr_type_not_contains?: Maybe<String>;
  attr_type_starts_with?: Maybe<String>;
  attr_type_not_starts_with?: Maybe<String>;
  attr_type_ends_with?: Maybe<String>;
  attr_type_not_ends_with?: Maybe<String>;
  AND?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
  OR?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
  NOT?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
}

export interface AttributeUpdateManyWithWhereNestedInput {
  where: AttributeScalarWhereInput;
  data: AttributeUpdateManyDataInput;
}

export interface AttributeUpdateManyDataInput {
  attr_type?: Maybe<String>;
}

export interface PhoneNumberUpsertWithWhereUniqueWithoutOwnerInput {
  where: PhoneNumberWhereUniqueInput;
  update: PhoneNumberUpdateWithoutOwnerDataInput;
  create: PhoneNumberCreateWithoutOwnerInput;
}

export interface PhoneNumberScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  value?: Maybe<Int>;
  value_not?: Maybe<Int>;
  value_in?: Maybe<Int[] | Int>;
  value_not_in?: Maybe<Int[] | Int>;
  value_lt?: Maybe<Int>;
  value_lte?: Maybe<Int>;
  value_gt?: Maybe<Int>;
  value_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput>;
  OR?: Maybe<PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput>;
  NOT?: Maybe<PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput>;
}

export interface PhoneNumberUpdateManyWithWhereNestedInput {
  where: PhoneNumberScalarWhereInput;
  data: PhoneNumberUpdateManyDataInput;
}

export interface PhoneNumberUpdateManyDataInput {
  value?: Maybe<Int>;
}

export interface IdentifiersUpdateOneRequiredInput {
  create?: Maybe<IdentifiersCreateInput>;
  update?: Maybe<IdentifiersUpdateDataInput>;
  upsert?: Maybe<IdentifiersUpsertNestedInput>;
  connect?: Maybe<IdentifiersWhereUniqueInput>;
}

export interface IdentifiersUpdateDataInput {
  tax_id?: Maybe<TaxIdUpdateManyInput>;
  email?: Maybe<EmailUpdateManyInput>;
  phone_number?: Maybe<PhoneNumberUpdateManyInput>;
}

export interface TaxIdUpdateManyInput {
  create?: Maybe<TaxIdCreateInput[] | TaxIdCreateInput>;
  update?: Maybe<
    | TaxIdUpdateWithWhereUniqueNestedInput[]
    | TaxIdUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TaxIdUpsertWithWhereUniqueNestedInput[]
    | TaxIdUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  connect?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  set?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  disconnect?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  deleteMany?: Maybe<TaxIdScalarWhereInput[] | TaxIdScalarWhereInput>;
}

export interface TaxIdUpdateWithWhereUniqueNestedInput {
  where: TaxIdWhereUniqueInput;
  data: TaxIdUpdateDataInput;
}

export interface TaxIdUpdateDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  attribute?: Maybe<AttributeUpdateManyWithoutTax_idInput>;
}

export interface AttributeUpdateManyWithoutTax_idInput {
  create?: Maybe<
    AttributeCreateWithoutTax_idInput[] | AttributeCreateWithoutTax_idInput
  >;
  delete?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  set?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  disconnect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  update?: Maybe<
    | AttributeUpdateWithWhereUniqueWithoutTax_idInput[]
    | AttributeUpdateWithWhereUniqueWithoutTax_idInput
  >;
  upsert?: Maybe<
    | AttributeUpsertWithWhereUniqueWithoutTax_idInput[]
    | AttributeUpsertWithWhereUniqueWithoutTax_idInput
  >;
  deleteMany?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
  updateMany?: Maybe<
    | AttributeUpdateManyWithWhereNestedInput[]
    | AttributeUpdateManyWithWhereNestedInput
  >;
}

export interface AttributeUpdateWithWhereUniqueWithoutTax_idInput {
  where: AttributeWhereUniqueInput;
  data: AttributeUpdateWithoutTax_idDataInput;
}

export interface AttributeUpdateWithoutTax_idDataInput {
  attr_type?: Maybe<String>;
  email?: Maybe<EmailUpdateManyWithoutAttributeInput>;
  phone_number?: Maybe<PhoneNumberUpdateManyWithoutAttributeInput>;
}

export interface PhoneNumberUpdateManyWithoutAttributeInput {
  create?: Maybe<
    | PhoneNumberCreateWithoutAttributeInput[]
    | PhoneNumberCreateWithoutAttributeInput
  >;
  delete?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  set?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  disconnect?: Maybe<
    PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput
  >;
  update?: Maybe<
    | PhoneNumberUpdateWithWhereUniqueWithoutAttributeInput[]
    | PhoneNumberUpdateWithWhereUniqueWithoutAttributeInput
  >;
  upsert?: Maybe<
    | PhoneNumberUpsertWithWhereUniqueWithoutAttributeInput[]
    | PhoneNumberUpsertWithWhereUniqueWithoutAttributeInput
  >;
  deleteMany?: Maybe<
    PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput
  >;
  updateMany?: Maybe<
    | PhoneNumberUpdateManyWithWhereNestedInput[]
    | PhoneNumberUpdateManyWithWhereNestedInput
  >;
}

export interface PhoneNumberUpdateWithWhereUniqueWithoutAttributeInput {
  where: PhoneNumberWhereUniqueInput;
  data: PhoneNumberUpdateWithoutAttributeDataInput;
}

export interface PhoneNumberUpdateWithoutAttributeDataInput {
  value?: Maybe<Int>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPhone_numberInput>;
}

export interface UserUpdateOneRequiredWithoutPhone_numberInput {
  create?: Maybe<UserCreateWithoutPhone_numberInput>;
  update?: Maybe<UserUpdateWithoutPhone_numberDataInput>;
  upsert?: Maybe<UserUpsertWithoutPhone_numberInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPhone_numberDataInput {
  email?: Maybe<String>;
  role?: Maybe<AuthLevel>;
  gender?: Maybe<Gender>;
  identifiers?: Maybe<IdentifiersUpdateOneRequiredInput>;
}

export interface UserUpsertWithoutPhone_numberInput {
  update: UserUpdateWithoutPhone_numberDataInput;
  create: UserCreateWithoutPhone_numberInput;
}

export interface PhoneNumberUpsertWithWhereUniqueWithoutAttributeInput {
  where: PhoneNumberWhereUniqueInput;
  update: PhoneNumberUpdateWithoutAttributeDataInput;
  create: PhoneNumberCreateWithoutAttributeInput;
}

export interface AttributeUpsertWithWhereUniqueWithoutTax_idInput {
  where: AttributeWhereUniqueInput;
  update: AttributeUpdateWithoutTax_idDataInput;
  create: AttributeCreateWithoutTax_idInput;
}

export interface TaxIdUpsertWithWhereUniqueNestedInput {
  where: TaxIdWhereUniqueInput;
  update: TaxIdUpdateDataInput;
  create: TaxIdCreateInput;
}

export interface TaxIdScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TaxIdScalarWhereInput[] | TaxIdScalarWhereInput>;
  OR?: Maybe<TaxIdScalarWhereInput[] | TaxIdScalarWhereInput>;
  NOT?: Maybe<TaxIdScalarWhereInput[] | TaxIdScalarWhereInput>;
}

export interface EmailUpdateManyInput {
  create?: Maybe<EmailCreateInput[] | EmailCreateInput>;
  update?: Maybe<
    | EmailUpdateWithWhereUniqueNestedInput[]
    | EmailUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | EmailUpsertWithWhereUniqueNestedInput[]
    | EmailUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  connect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  set?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  disconnect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  deleteMany?: Maybe<EmailScalarWhereInput[] | EmailScalarWhereInput>;
  updateMany?: Maybe<
    EmailUpdateManyWithWhereNestedInput[] | EmailUpdateManyWithWhereNestedInput
  >;
}

export interface EmailUpdateWithWhereUniqueNestedInput {
  where: EmailWhereUniqueInput;
  data: EmailUpdateDataInput;
}

export interface EmailUpdateDataInput {
  value?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredInput>;
  attribute?: Maybe<AttributeUpdateManyWithoutEmailInput>;
}

export interface AttributeUpdateManyWithoutEmailInput {
  create?: Maybe<
    AttributeCreateWithoutEmailInput[] | AttributeCreateWithoutEmailInput
  >;
  delete?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  set?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  disconnect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  update?: Maybe<
    | AttributeUpdateWithWhereUniqueWithoutEmailInput[]
    | AttributeUpdateWithWhereUniqueWithoutEmailInput
  >;
  upsert?: Maybe<
    | AttributeUpsertWithWhereUniqueWithoutEmailInput[]
    | AttributeUpsertWithWhereUniqueWithoutEmailInput
  >;
  deleteMany?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
  updateMany?: Maybe<
    | AttributeUpdateManyWithWhereNestedInput[]
    | AttributeUpdateManyWithWhereNestedInput
  >;
}

export interface AttributeUpdateWithWhereUniqueWithoutEmailInput {
  where: AttributeWhereUniqueInput;
  data: AttributeUpdateWithoutEmailDataInput;
}

export interface AttributeUpdateWithoutEmailDataInput {
  attr_type?: Maybe<String>;
  tax_id?: Maybe<TaxIdUpdateManyWithoutAttributeInput>;
  phone_number?: Maybe<PhoneNumberUpdateManyWithoutAttributeInput>;
}

export interface AttributeUpsertWithWhereUniqueWithoutEmailInput {
  where: AttributeWhereUniqueInput;
  update: AttributeUpdateWithoutEmailDataInput;
  create: AttributeCreateWithoutEmailInput;
}

export interface EmailUpsertWithWhereUniqueNestedInput {
  where: EmailWhereUniqueInput;
  update: EmailUpdateDataInput;
  create: EmailCreateInput;
}

export interface PhoneNumberUpdateManyInput {
  create?: Maybe<PhoneNumberCreateInput[] | PhoneNumberCreateInput>;
  update?: Maybe<
    | PhoneNumberUpdateWithWhereUniqueNestedInput[]
    | PhoneNumberUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PhoneNumberUpsertWithWhereUniqueNestedInput[]
    | PhoneNumberUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  set?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  disconnect?: Maybe<
    PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput
  >;
  deleteMany?: Maybe<
    PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput
  >;
  updateMany?: Maybe<
    | PhoneNumberUpdateManyWithWhereNestedInput[]
    | PhoneNumberUpdateManyWithWhereNestedInput
  >;
}

export interface PhoneNumberUpdateWithWhereUniqueNestedInput {
  where: PhoneNumberWhereUniqueInput;
  data: PhoneNumberUpdateDataInput;
}

export interface PhoneNumberUpdateDataInput {
  value?: Maybe<Int>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPhone_numberInput>;
  attribute?: Maybe<AttributeUpdateManyWithoutPhone_numberInput>;
}

export interface PhoneNumberUpsertWithWhereUniqueNestedInput {
  where: PhoneNumberWhereUniqueInput;
  update: PhoneNumberUpdateDataInput;
  create: PhoneNumberCreateInput;
}

export interface IdentifiersUpsertNestedInput {
  update: IdentifiersUpdateDataInput;
  create: IdentifiersCreateInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface TaxIdUpsertWithWhereUniqueWithoutAttributeInput {
  where: TaxIdWhereUniqueInput;
  update: TaxIdUpdateWithoutAttributeDataInput;
  create: TaxIdCreateWithoutAttributeInput;
}

export interface AttributeUpdateManyMutationInput {
  attr_type?: Maybe<String>;
}

export interface EmailUpdateInput {
  value?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredInput>;
  attribute?: Maybe<AttributeUpdateManyWithoutEmailInput>;
}

export interface EmailUpdateManyMutationInput {
  value?: Maybe<String>;
}

export interface FemaleCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  attribute?: Maybe<AttributeCreateManyInput>;
}

export interface AttributeCreateManyInput {
  create?: Maybe<AttributeCreateInput[] | AttributeCreateInput>;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
}

export interface FemaleUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  attribute?: Maybe<AttributeUpdateManyInput>;
}

export interface AttributeUpdateManyInput {
  create?: Maybe<AttributeCreateInput[] | AttributeCreateInput>;
  update?: Maybe<
    | AttributeUpdateWithWhereUniqueNestedInput[]
    | AttributeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AttributeUpsertWithWhereUniqueNestedInput[]
    | AttributeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  set?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  disconnect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  deleteMany?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
  updateMany?: Maybe<
    | AttributeUpdateManyWithWhereNestedInput[]
    | AttributeUpdateManyWithWhereNestedInput
  >;
}

export interface AttributeUpdateWithWhereUniqueNestedInput {
  where: AttributeWhereUniqueInput;
  data: AttributeUpdateDataInput;
}

export interface AttributeUpdateDataInput {
  attr_type?: Maybe<String>;
  tax_id?: Maybe<TaxIdUpdateManyWithoutAttributeInput>;
  email?: Maybe<EmailUpdateManyWithoutAttributeInput>;
  phone_number?: Maybe<PhoneNumberUpdateManyWithoutAttributeInput>;
}

export interface AttributeUpsertWithWhereUniqueNestedInput {
  where: AttributeWhereUniqueInput;
  update: AttributeUpdateDataInput;
  create: AttributeCreateInput;
}

export interface IdentifiersUpdateInput {
  tax_id?: Maybe<TaxIdUpdateManyInput>;
  email?: Maybe<EmailUpdateManyInput>;
  phone_number?: Maybe<PhoneNumberUpdateManyInput>;
}

export interface MaleCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  attribute?: Maybe<AttributeCreateManyInput>;
}

export interface MaleUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  attribute?: Maybe<AttributeUpdateManyInput>;
}

export interface PhoneNumberUpdateInput {
  value?: Maybe<Int>;
  owner?: Maybe<UserUpdateOneRequiredWithoutPhone_numberInput>;
  attribute?: Maybe<AttributeUpdateManyWithoutPhone_numberInput>;
}

export interface PhoneNumberUpdateManyMutationInput {
  value?: Maybe<Int>;
}

export interface TaxIdUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  attribute?: Maybe<AttributeUpdateManyWithoutTax_idInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  phone_number?: Maybe<PhoneNumberUpdateManyWithoutOwnerInput>;
  role?: Maybe<AuthLevel>;
  gender?: Maybe<Gender>;
  identifiers?: Maybe<IdentifiersUpdateOneRequiredInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  role?: Maybe<AuthLevel>;
  gender?: Maybe<Gender>;
}

export interface AttributeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AttributeWhereInput>;
  AND?: Maybe<
    AttributeSubscriptionWhereInput[] | AttributeSubscriptionWhereInput
  >;
  OR?: Maybe<
    AttributeSubscriptionWhereInput[] | AttributeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AttributeSubscriptionWhereInput[] | AttributeSubscriptionWhereInput
  >;
}

export interface EmailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmailWhereInput>;
  AND?: Maybe<EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput>;
  OR?: Maybe<EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput>;
  NOT?: Maybe<EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput>;
}

export interface FemaleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FemaleWhereInput>;
  AND?: Maybe<FemaleSubscriptionWhereInput[] | FemaleSubscriptionWhereInput>;
  OR?: Maybe<FemaleSubscriptionWhereInput[] | FemaleSubscriptionWhereInput>;
  NOT?: Maybe<FemaleSubscriptionWhereInput[] | FemaleSubscriptionWhereInput>;
}

export interface IdentifiersSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IdentifiersWhereInput>;
  AND?: Maybe<
    IdentifiersSubscriptionWhereInput[] | IdentifiersSubscriptionWhereInput
  >;
  OR?: Maybe<
    IdentifiersSubscriptionWhereInput[] | IdentifiersSubscriptionWhereInput
  >;
  NOT?: Maybe<
    IdentifiersSubscriptionWhereInput[] | IdentifiersSubscriptionWhereInput
  >;
}

export interface MaleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MaleWhereInput>;
  AND?: Maybe<MaleSubscriptionWhereInput[] | MaleSubscriptionWhereInput>;
  OR?: Maybe<MaleSubscriptionWhereInput[] | MaleSubscriptionWhereInput>;
  NOT?: Maybe<MaleSubscriptionWhereInput[] | MaleSubscriptionWhereInput>;
}

export interface PhoneNumberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PhoneNumberWhereInput>;
  AND?: Maybe<
    PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput
  >;
  OR?: Maybe<
    PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput
  >;
}

export interface TaxIdSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaxIdWhereInput>;
  AND?: Maybe<TaxIdSubscriptionWhereInput[] | TaxIdSubscriptionWhereInput>;
  OR?: Maybe<TaxIdSubscriptionWhereInput[] | TaxIdSubscriptionWhereInput>;
  NOT?: Maybe<TaxIdSubscriptionWhereInput[] | TaxIdSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Attribute {
  id: ID_Output;
  attr_type: String;
}

export interface AttributePromise extends Promise<Attribute>, Fragmentable {
  id: () => Promise<ID_Output>;
  attr_type: () => Promise<String>;
  tax_id: <T = FragmentableArray<TaxId>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = FragmentableArray<Email>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttributeSubscription
  extends Promise<AsyncIterator<Attribute>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  attr_type: () => Promise<AsyncIterator<String>>;
  tax_id: <T = Promise<AsyncIterator<TaxIdSubscription>>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = Promise<AsyncIterator<EmailSubscription>>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = Promise<AsyncIterator<PhoneNumberSubscription>>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttributeNullablePromise
  extends Promise<Attribute | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  attr_type: () => Promise<String>;
  tax_id: <T = FragmentableArray<TaxId>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = FragmentableArray<Email>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaxId {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TaxIdPromise extends Promise<TaxId>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaxIdSubscription
  extends Promise<AsyncIterator<TaxId>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  attribute: <T = Promise<AsyncIterator<AttributeSubscription>>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaxIdNullablePromise
  extends Promise<TaxId | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  role?: AuthLevel;
  gender: Gender;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<AuthLevel>;
  gender: () => Promise<Gender>;
  identifiers: <T = IdentifiersPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  phone_number: <T = Promise<AsyncIterator<PhoneNumberSubscription>>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<AsyncIterator<AuthLevel>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  identifiers: <T = IdentifiersSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<AuthLevel>;
  gender: () => Promise<Gender>;
  identifiers: <T = IdentifiersPromise>() => T;
}

export interface PhoneNumber {
  id: ID_Output;
  value?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PhoneNumberPromise extends Promise<PhoneNumber>, Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PhoneNumberSubscription
  extends Promise<AsyncIterator<PhoneNumber>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  attribute: <T = Promise<AsyncIterator<AttributeSubscription>>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PhoneNumberNullablePromise
  extends Promise<PhoneNumber | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Identifiers {
  id: ID_Output;
}

export interface IdentifiersPromise extends Promise<Identifiers>, Fragmentable {
  id: () => Promise<ID_Output>;
  tax_id: <T = FragmentableArray<TaxId>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = FragmentableArray<Email>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface IdentifiersSubscription
  extends Promise<AsyncIterator<Identifiers>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tax_id: <T = Promise<AsyncIterator<TaxIdSubscription>>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = Promise<AsyncIterator<EmailSubscription>>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = Promise<AsyncIterator<PhoneNumberSubscription>>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface IdentifiersNullablePromise
  extends Promise<Identifiers | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tax_id: <T = FragmentableArray<TaxId>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = FragmentableArray<Email>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Email {
  id: ID_Output;
  value: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EmailPromise extends Promise<Email>, Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EmailSubscription
  extends Promise<AsyncIterator<Email>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  attribute: <T = Promise<AsyncIterator<AttributeSubscription>>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EmailNullablePromise
  extends Promise<Email | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttributeConnection {
  pageInfo: PageInfo;
  edges: AttributeEdge[];
}

export interface AttributeConnectionPromise
  extends Promise<AttributeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttributeEdge>>() => T;
  aggregate: <T = AggregateAttributePromise>() => T;
}

export interface AttributeConnectionSubscription
  extends Promise<AsyncIterator<AttributeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttributeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttributeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AttributeEdge {
  node: Attribute;
  cursor: String;
}

export interface AttributeEdgePromise
  extends Promise<AttributeEdge>,
    Fragmentable {
  node: <T = AttributePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttributeEdgeSubscription
  extends Promise<AsyncIterator<AttributeEdge>>,
    Fragmentable {
  node: <T = AttributeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAttribute {
  count: Int;
}

export interface AggregateAttributePromise
  extends Promise<AggregateAttribute>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttributeSubscription
  extends Promise<AsyncIterator<AggregateAttribute>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmailConnection {
  pageInfo: PageInfo;
  edges: EmailEdge[];
}

export interface EmailConnectionPromise
  extends Promise<EmailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmailEdge>>() => T;
  aggregate: <T = AggregateEmailPromise>() => T;
}

export interface EmailConnectionSubscription
  extends Promise<AsyncIterator<EmailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmailSubscription>() => T;
}

export interface EmailEdge {
  node: Email;
  cursor: String;
}

export interface EmailEdgePromise extends Promise<EmailEdge>, Fragmentable {
  node: <T = EmailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmailEdgeSubscription
  extends Promise<AsyncIterator<EmailEdge>>,
    Fragmentable {
  node: <T = EmailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmail {
  count: Int;
}

export interface AggregateEmailPromise
  extends Promise<AggregateEmail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmailSubscription
  extends Promise<AsyncIterator<AggregateEmail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Female {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FemalePromise extends Promise<Female>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FemaleSubscription
  extends Promise<AsyncIterator<Female>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  attribute: <T = Promise<AsyncIterator<AttributeSubscription>>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FemaleNullablePromise
  extends Promise<Female | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FemaleConnection {
  pageInfo: PageInfo;
  edges: FemaleEdge[];
}

export interface FemaleConnectionPromise
  extends Promise<FemaleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FemaleEdge>>() => T;
  aggregate: <T = AggregateFemalePromise>() => T;
}

export interface FemaleConnectionSubscription
  extends Promise<AsyncIterator<FemaleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FemaleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFemaleSubscription>() => T;
}

export interface FemaleEdge {
  node: Female;
  cursor: String;
}

export interface FemaleEdgePromise extends Promise<FemaleEdge>, Fragmentable {
  node: <T = FemalePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FemaleEdgeSubscription
  extends Promise<AsyncIterator<FemaleEdge>>,
    Fragmentable {
  node: <T = FemaleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFemale {
  count: Int;
}

export interface AggregateFemalePromise
  extends Promise<AggregateFemale>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFemaleSubscription
  extends Promise<AsyncIterator<AggregateFemale>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IdentifiersConnection {
  pageInfo: PageInfo;
  edges: IdentifiersEdge[];
}

export interface IdentifiersConnectionPromise
  extends Promise<IdentifiersConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IdentifiersEdge>>() => T;
  aggregate: <T = AggregateIdentifiersPromise>() => T;
}

export interface IdentifiersConnectionSubscription
  extends Promise<AsyncIterator<IdentifiersConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IdentifiersEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIdentifiersSubscription>() => T;
}

export interface IdentifiersEdge {
  node: Identifiers;
  cursor: String;
}

export interface IdentifiersEdgePromise
  extends Promise<IdentifiersEdge>,
    Fragmentable {
  node: <T = IdentifiersPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IdentifiersEdgeSubscription
  extends Promise<AsyncIterator<IdentifiersEdge>>,
    Fragmentable {
  node: <T = IdentifiersSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIdentifiers {
  count: Int;
}

export interface AggregateIdentifiersPromise
  extends Promise<AggregateIdentifiers>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIdentifiersSubscription
  extends Promise<AsyncIterator<AggregateIdentifiers>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Male {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MalePromise extends Promise<Male>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MaleSubscription
  extends Promise<AsyncIterator<Male>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  attribute: <T = Promise<AsyncIterator<AttributeSubscription>>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MaleNullablePromise
  extends Promise<Male | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MaleConnection {
  pageInfo: PageInfo;
  edges: MaleEdge[];
}

export interface MaleConnectionPromise
  extends Promise<MaleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MaleEdge>>() => T;
  aggregate: <T = AggregateMalePromise>() => T;
}

export interface MaleConnectionSubscription
  extends Promise<AsyncIterator<MaleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MaleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMaleSubscription>() => T;
}

export interface MaleEdge {
  node: Male;
  cursor: String;
}

export interface MaleEdgePromise extends Promise<MaleEdge>, Fragmentable {
  node: <T = MalePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MaleEdgeSubscription
  extends Promise<AsyncIterator<MaleEdge>>,
    Fragmentable {
  node: <T = MaleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMale {
  count: Int;
}

export interface AggregateMalePromise
  extends Promise<AggregateMale>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMaleSubscription
  extends Promise<AsyncIterator<AggregateMale>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PhoneNumberConnection {
  pageInfo: PageInfo;
  edges: PhoneNumberEdge[];
}

export interface PhoneNumberConnectionPromise
  extends Promise<PhoneNumberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PhoneNumberEdge>>() => T;
  aggregate: <T = AggregatePhoneNumberPromise>() => T;
}

export interface PhoneNumberConnectionSubscription
  extends Promise<AsyncIterator<PhoneNumberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PhoneNumberEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePhoneNumberSubscription>() => T;
}

export interface PhoneNumberEdge {
  node: PhoneNumber;
  cursor: String;
}

export interface PhoneNumberEdgePromise
  extends Promise<PhoneNumberEdge>,
    Fragmentable {
  node: <T = PhoneNumberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PhoneNumberEdgeSubscription
  extends Promise<AsyncIterator<PhoneNumberEdge>>,
    Fragmentable {
  node: <T = PhoneNumberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePhoneNumber {
  count: Int;
}

export interface AggregatePhoneNumberPromise
  extends Promise<AggregatePhoneNumber>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePhoneNumberSubscription
  extends Promise<AsyncIterator<AggregatePhoneNumber>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaxIdConnection {
  pageInfo: PageInfo;
  edges: TaxIdEdge[];
}

export interface TaxIdConnectionPromise
  extends Promise<TaxIdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaxIdEdge>>() => T;
  aggregate: <T = AggregateTaxIdPromise>() => T;
}

export interface TaxIdConnectionSubscription
  extends Promise<AsyncIterator<TaxIdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaxIdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaxIdSubscription>() => T;
}

export interface TaxIdEdge {
  node: TaxId;
  cursor: String;
}

export interface TaxIdEdgePromise extends Promise<TaxIdEdge>, Fragmentable {
  node: <T = TaxIdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaxIdEdgeSubscription
  extends Promise<AsyncIterator<TaxIdEdge>>,
    Fragmentable {
  node: <T = TaxIdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTaxId {
  count: Int;
}

export interface AggregateTaxIdPromise
  extends Promise<AggregateTaxId>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaxIdSubscription
  extends Promise<AsyncIterator<AggregateTaxId>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AttributeSubscriptionPayload {
  mutation: MutationType;
  node: Attribute;
  updatedFields: String[];
  previousValues: AttributePreviousValues;
}

export interface AttributeSubscriptionPayloadPromise
  extends Promise<AttributeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttributePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttributePreviousValuesPromise>() => T;
}

export interface AttributeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttributeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttributeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttributePreviousValuesSubscription>() => T;
}

export interface AttributePreviousValues {
  id: ID_Output;
  attr_type: String;
}

export interface AttributePreviousValuesPromise
  extends Promise<AttributePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  attr_type: () => Promise<String>;
}

export interface AttributePreviousValuesSubscription
  extends Promise<AsyncIterator<AttributePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  attr_type: () => Promise<AsyncIterator<String>>;
}

export interface EmailSubscriptionPayload {
  mutation: MutationType;
  node: Email;
  updatedFields: String[];
  previousValues: EmailPreviousValues;
}

export interface EmailSubscriptionPayloadPromise
  extends Promise<EmailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmailPreviousValuesPromise>() => T;
}

export interface EmailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmailPreviousValuesSubscription>() => T;
}

export interface EmailPreviousValues {
  id: ID_Output;
  value: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EmailPreviousValuesPromise
  extends Promise<EmailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EmailPreviousValuesSubscription
  extends Promise<AsyncIterator<EmailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FemaleSubscriptionPayload {
  mutation: MutationType;
  node: Female;
  updatedFields: String[];
  previousValues: FemalePreviousValues;
}

export interface FemaleSubscriptionPayloadPromise
  extends Promise<FemaleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FemalePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FemalePreviousValuesPromise>() => T;
}

export interface FemaleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FemaleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FemaleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FemalePreviousValuesSubscription>() => T;
}

export interface FemalePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FemalePreviousValuesPromise
  extends Promise<FemalePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FemalePreviousValuesSubscription
  extends Promise<AsyncIterator<FemalePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IdentifiersSubscriptionPayload {
  mutation: MutationType;
  node: Identifiers;
  updatedFields: String[];
  previousValues: IdentifiersPreviousValues;
}

export interface IdentifiersSubscriptionPayloadPromise
  extends Promise<IdentifiersSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IdentifiersPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IdentifiersPreviousValuesPromise>() => T;
}

export interface IdentifiersSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IdentifiersSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IdentifiersSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IdentifiersPreviousValuesSubscription>() => T;
}

export interface IdentifiersPreviousValues {
  id: ID_Output;
}

export interface IdentifiersPreviousValuesPromise
  extends Promise<IdentifiersPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface IdentifiersPreviousValuesSubscription
  extends Promise<AsyncIterator<IdentifiersPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface MaleSubscriptionPayload {
  mutation: MutationType;
  node: Male;
  updatedFields: String[];
  previousValues: MalePreviousValues;
}

export interface MaleSubscriptionPayloadPromise
  extends Promise<MaleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MalePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MalePreviousValuesPromise>() => T;
}

export interface MaleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MaleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MaleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MalePreviousValuesSubscription>() => T;
}

export interface MalePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MalePreviousValuesPromise
  extends Promise<MalePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MalePreviousValuesSubscription
  extends Promise<AsyncIterator<MalePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PhoneNumberSubscriptionPayload {
  mutation: MutationType;
  node: PhoneNumber;
  updatedFields: String[];
  previousValues: PhoneNumberPreviousValues;
}

export interface PhoneNumberSubscriptionPayloadPromise
  extends Promise<PhoneNumberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PhoneNumberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PhoneNumberPreviousValuesPromise>() => T;
}

export interface PhoneNumberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PhoneNumberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PhoneNumberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PhoneNumberPreviousValuesSubscription>() => T;
}

export interface PhoneNumberPreviousValues {
  id: ID_Output;
  value?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PhoneNumberPreviousValuesPromise
  extends Promise<PhoneNumberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PhoneNumberPreviousValuesSubscription
  extends Promise<AsyncIterator<PhoneNumberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TaxIdSubscriptionPayload {
  mutation: MutationType;
  node: TaxId;
  updatedFields: String[];
  previousValues: TaxIdPreviousValues;
}

export interface TaxIdSubscriptionPayloadPromise
  extends Promise<TaxIdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaxIdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaxIdPreviousValuesPromise>() => T;
}

export interface TaxIdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaxIdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaxIdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaxIdPreviousValuesSubscription>() => T;
}

export interface TaxIdPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TaxIdPreviousValuesPromise
  extends Promise<TaxIdPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TaxIdPreviousValuesSubscription
  extends Promise<AsyncIterator<TaxIdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  role?: AuthLevel;
  gender: Gender;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  role: () => Promise<AuthLevel>;
  gender: () => Promise<Gender>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<AuthLevel>>;
  gender: () => Promise<AsyncIterator<Gender>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Identifiers",
    embedded: false
  },
  {
    name: "TaxId",
    embedded: false
  },
  {
    name: "Email",
    embedded: false
  },
  {
    name: "PhoneNumber",
    embedded: false
  },
  {
    name: "Attribute",
    embedded: false
  },
  {
    name: "TaxIdAttribute",
    embedded: false
  },
  {
    name: "EmailAttribute",
    embedded: false
  },
  {
    name: "PhoneNumberAttribute",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  },
  {
    name: "Female",
    embedded: false
  },
  {
    name: "Male",
    embedded: false
  },
  {
    name: "AuthLevel",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
